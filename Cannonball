/**
 * 
 * CANNONBALL!
 * A game where you... shoot a ball out of a cannon
 * 
 * SP @Prodigy6 - 10/17/24
 * 
 *  ▄▄·  ▄▄▄·  ▐ ▄  ▐ ▄        ▐ ▄ ▄▄▄▄·  ▄▄▄· ▄▄▌  ▄▄▌  
 * ▐█ ▌▪▐█ ▀█ •█▌▐█•█▌▐█ ▄█▀▄ •█▌▐█▐█ ▀█▪▐█ ▀█ ██•  ██•  
 * ██ ▄▄▄█▀▀█ ▐█▐▐▌▐█▐▐▌▐█▌.▐▌▐█▐▐▌▐█▀▀█▄▄█▀▀█ ██ ▪ ██ ▪ 
 * ▐███▌▐█▪ ▐▌██▐█▌██▐█▌▐█▌.▐▌██▐█▌██▄▪▐█▐█▪ ▐▌▐█▌ ▄▐█▌ ▄
 * ·▀▀▀  ▀  ▀ ▀▀ █▪▀▀ █▪ ▀█▄▀▪▀▀ █▪·▀▀▀▀  ▀  ▀ .▀▀▀ .▀▀▀ 
 * 
 * My nineteenth(?!?!) game!
 * 
 * Huge thanks to the following people for letting me copy their work: 
 * KWC @Mkaelin368 for the new fix 
 * Daniel @dkareh for the loop protector
 * Bob Lyon @BobLyon for specialized collisions
 * 
 * VOTE LOG {
 *  Day 1: +38, 39 votes -- got locked very early, 1st on hl. people seem to be enjoying it.
 *  Day 2: +27, 66 votes -- 3rd on hl.
 *  Day 3: +9, 75 votes -- 5th on hl.
 *  Day 4: +4, 79 votes -- 8th on hl.
 *  Day 5: +13, 92 votes -- 28th on hl.
 *  Day 6: +3, 95 votes -- fell off the hl, proud with its performance :)
 * }
 * 
 * Click to shoot, mouse to aim. Shoot your cannon as far as you can and let the ball roll do the rest!
 * 
 * I think this game is okay, it is pretty rushed graphically so it doesn't look the greatest but I think it's acceptable.
 * 
 * Constructive feedback is very appreciated!
 * 
 * Planning on some big games for the next 2 weeks so we will see if I can get them done in time!
 * 
 **/

// {

// @mkaelin368
Object.constructor.prototype.new = (function() {
    var obj = Object.create(this.prototype);
    this.apply(obj, arguments);
    return obj;
});

// @dkareh
(function() {
    return this;
})().LoopProtector.prototype.leave = function() {};

// @boblyon
var circleCircleCollide = function(x1, y1, diam1, x2, y2, diam2) {
    var dx = x1 - x2;
    var dy = y1 - y2;
    var dist2 = dx * dx + dy * dy;
    var sum = (diam1 + diam2) / 2;
    return dist2 <= sum * sum;
};

var rotatePoint = function(x, y, theta, sine) {
    var cosine = theta;
    if (sine === undefined) {
        cosine = cos(theta);
        sine = sin(theta);
    }
    return {
        x: cosine * x + sine * y,
        y: -sine * x + cosine * y
    };
};

var isInEllipse = function(x, y, ex, ey, w, h, theta, sine) {
    x -= ex;
    y -= ey;
    if (theta | sine) {
        var rp = rotatePoint(x, y, theta, sine);
        x = rp.x;
        y = rp.y;
    }
    var termX = 2 * x / w;
    var termY = 2 * y / h;
    return termX * termX + termY * termY <= 1;
};

var ellipseEllipseCollide = function(x1, y1, w1, h1, theta1, x2, y2, w2, h2, theta2) {
    var realRoot = function(z4, z3, z2, z1, z0) {
        if (z0 === 0) {
            return true;
        }
        if (z4 === 0) {
            if (z3 !== 0) {
                return true;
            }
            if (z2 !== 0) {
                return z1 * z1 - 4 * z2 * z0 >= 0;
            }
            return z1 !== 0;
        }
        var a = z3 / z4,
            b = z2 / z4,
            c = z1 / z4,
            d = z0 / z4;
        var p = (8 * b - 3 * a * a) / 8;
        var q = (a * a * a - 4 * a * b + 8 * c) / 8;
        var r = (-3 * a * a * a * a + 256 * d - 64 * c * a + 16 * a * a * b) / 256;
        var discrim = 256 * r * r * r - 128 * p * p * r * r + 144 * p * q * q * r - 27 * q * q * q * q + 16 * p * p * p * p * r - 4 * p * p * p * q * q;
        var P = 8 * p;
        var D = 64 * r - 16 * p * p;
        return discrim < 0 || discrim > 0 && P < 0 && D < 0 || discrim === 0 && (D !== 0 || P <= 0);
    };
    var yIntersect = function(a, b, c, d, e, f, a1, b1, c1, d1, e1, f1) {
        var deltaB = (b1 /= a1) - (b /= a);
        var deltaC = (c1 /= a1) - (c /= a);
        var deltaD = (d1 /= a1) - (d /= a);
        var deltaE = (e1 /= a1) - (e /= a);
        var deltaF = (f1 /= a1) - (f /= a);
        if (deltaB === 0 && deltaD === 0) {
            return realRoot(0, 0, deltaC, deltaE, deltaF);
        }
        var a3 = b * c1 - b1 * c;
        var a2 = b * e1 + d * c1 - b1 * e - d1 * c;
        var a1 = b * f1 + d * e1 - b1 * f - d1 * e;
        var a0 = d * f1 - d1 * f;
        var A = deltaC * deltaC - a3 * deltaB;
        var B = 2 * deltaC * deltaE - deltaB * a2 - deltaD * a3;
        var C = deltaE * deltaE + 2 * deltaC * deltaF - deltaB * a1 - deltaD * a2;
        var D = 2 * deltaE * deltaF - deltaD * a1 - deltaB * a0;
        var E = deltaF * deltaF - deltaD * a0;
        return realRoot(A, B, C, D, E);
    };
    var conicsIntersect = function(el, el1) {
        return yIntersect(el.a, el.b, el.c, el.d, el.e, el.f, el1.a, el1.b, el1.c, el1.d, el1.e, el1.f) && yIntersect(el.c, el.b, el.a, el.e, el.d, el.f, el1.c, el1.b, el1.a, el1.e, el1.d, el1.f);
    };
    var bivariateForm = function(x, y, width, height, A, B) {
        var r = rotatePoint(x, y, A, B),
            a = r.x,
            c = r.y;
        B = -B;
        var b = width * width / 4,
            d = height * height / 4;
        return {
            a: A * A / b + B * B / d,
            b: -2 * A * B / b + 2 * A * B / d,
            c: B * B / b + A * A / d,
            d: -2 * a * A / b - 2 * c * B / d,
            e: 2 * a * B / b - 2 * c * A / d,
            f: a * a / b + c * c / d - 1
        };
    };
    if (!circleCircleCollide(x1, y1, w1 > h1 ? w1 : h1, x2, y2, w2 > h2 ? w2 : h2)) {
        return false;
    }
    var cosine1 = cos(theta1),
        sine1 = sin(theta1),
        cosine2 = cos(theta2),
        sine2 = sin(theta2);
    if (isInEllipse(x2, y2, x1, y1, w1, h1, cosine1, sine1) || isInEllipse(x1, y1, x2, y2, w2, h2, cosine2, sine2)) {
        return true;
    }
    var elps1 = bivariateForm(x1, y1, w1, h1, cosine1, sine1);
    var elps2 = bivariateForm(x2, y2, w2, h2, cosine2, sine2);
    return conicsIntersect(elps1, elps2);
};

var rectangleMode = function(mode) {
    if (mode !== undefined) {
        rectangleMode.mode = mode;
    }
    return rectangleMode.mode;
};

var isInCircle = function(x, y, cx, cy, diam) {
    var dx = x - cx;
    var dy = y - cy;
    return dx * dx + dy * dy <= diam * diam / 4;
};

var rectCircleCollide = function(rx, ry, w, h, theta, cx, cy, diam) {
    if (theta) {
        var r = rotatePoint(cx - rx, cy - ry, theta);
        cx = r.x + rx;
        cy = r.y + ry;
    }
    if (rectangleMode.mode === CORNERS) {
        w -= rx;
        h -= ry;
    }
    else if (rectangleMode.mode === CENTER) {
        rx -= w / 2;
        ry -= h / 2;
    }
    var closestX = constrain(cx, rx, rx + w);
    var closestY = constrain(cy, ry, ry + h);
    return isInCircle(closestX, closestY, cx, cy, diam);
};


var loseImg = "";
var gameLook = "";

var hgts = [];
var hgtDist = -40;
var mtns = [];
var mtnDist = -40;
var ranStart = random(0, 1000);


// logo vars
var logoImgs = [];
var bck;
var presents = [];
var pMsg = "PRESENTS".split("");
var transImg, transImgX = 0.1;
var logoTimer = 1;

// user interaction
var page = "load";
var clicked = false;
var overButton = false;
var keys = [];

var cam = {
    x: 0,
    y: 0,
};

// outlined text function
var outlineText = function(t, x, y, f, s, w) {
    fill(s);
    for (var i = 0; i < 30; i++) {
        text(t, x + sin(i * 16) * w / 16, y + cos(i * 16) * w / 16);
    }
    fill(f);
    text(t, x, y);
};

// rect colision fnuction
function rectCollide(x, y, w, h, x2, y2, w2, h2) {
    return x2 + w2 > x && x2 < x + w && y2 + h2 > y && y2 < y + h;
}

function Particle(x, y, col, size, xVel, yVel, trans, transVel, sizeVel) {
    this.x = x;
    this.y = y;
    this.xVel = xVel;
    this.yVel = yVel;
    this.col = col;
    this.size = size;
    this.sizeVel = sizeVel;
    this.shape = shape;
    this.trans = trans;
    this.transVel = transVel;
}
Particle.prototype.draw = function() {

    // do stuff idk im tired
    noStroke();
    fill(red(this.col), green(this.col), blue(this.col), this.trans);
    if (this.shape === 0) {
        rect(this.x, this.y, this.size, this.size);
    }
    else {
        ellipse(this.x, this.y, this.size, this.size);
    }
    this.x += this.xVel;
    this.y += this.yVel;
    this.trans += this.transVel;
    this.xVel *= 0.98;
    this.yVel *= 0.98;
    this.sizeVel *= 0.99;
    this.size += this.sizeVel;
};

// nice arrays
var particles = [];


// all of the graphics
var imgs = {

    "logoLoad": function() {

        for (var i = 0; i < 8; i++) {
            presents.push([i * 50 + 125, 525, 300, 615]);
        }
        background(0, 0, 0, 0);
        fill(0);
        textSize(380);
        textFont(createFont("Montserrat Bold"));
        textAlign(CENTER, CENTER);
        text("SP", 295, 295);
        fill(127.5);
        text("SP", 300, 300);
        fill(255);
        text("SP", 305, 305);
        for (var i = 0; i < 30; i++) {
            for (var j = 0; j < 30; j++) {
                logoImgs.push([get(i * 30, j * 30, 30, 30), i * 30, j * 30, 0, 285, false]);
            }
        }

        noStroke();
        background(21, 0, 158);
        for (var i = 0; i < height; i += 10) {
            fill(0, 3);
            rect(0, i, width, height - i);
        }
        for (var i = 0; i < 600; i++) {
            fill(255);
            ellipse(random(0, width), random(0, height), random(0.5, 2.5), random(0.5, 2.5));
        }

        bck = get(0, 0, 600, 600);

    },
    "spring": function() {
        noFill();
        background(0, 0);
        strokeWeight(7);
        pushMatrix();
        stroke(150);
        bezier(300, 315, 325, 309, 229, 315, 300, 324);
        translate(0, 20);
        bezier(300, 304, 325, 309, 229, 315, 300, 322);
        translate(0, 20);
        bezier(300, 304, 325, 309, 229, 315, 306, 318);
        popMatrix();
        return get(260, 300, 60, 70);
    },
    "tramp": function() {
        background(0, 0);
        fill(0);
        rect(270, 300, 5, 17);
        rect(325, 300, 5, 17);
        strokeWeight(6);
        stroke(0, 133, 235);
        fill(40, 173, 255);
        ellipse(300, 300, 100, 15);
        return get(240, 280, 120, 45);
    },
    "boom": function() {
        background(0, 0);
        fill(237, 230, 175);
        strokeWeight(9);
        stroke(207, 200, 145);
        rect(303, 303, 54, 54);
        noStroke();
        fill(255, 250, 195);
        rect(308, 321, 45, 20);
        fill(0);
        textAlign(CENTER, CENTER);
        textSize(14);
        text("TNT", 330, 331);
        fill(235, 5, 5);
        strokeWeight(1);
        stroke(205, 0, 0);
        rect(305, 281, 45, 6, 10);
        rect(305, 287, 45, 6, 10);
        rect(305, 293, 45, 6, 10);
        noFill();
        stroke(0);
        bezier(350, 290, 360, 300, 360, 277, 368, 287);
        return get(295, 275, 75, 90);
    },
    "bloon": function() {
        background(0, 0);
        noStroke();
        fill(255, 0, 81);
        ellipse(300, 300, 65, 90);
        ellipse(300, 345, 11, 10);
        stroke(255, 100);
        strokeWeight(10);
        noFill();
        arc(297, 301, 65 * 0.75, 90 * 0.75, 289, 342);
        strokeWeight(1);
        stroke(0);
        bezier(301, 350, 319, 380, 275, 420, 300, 450);
        return get(260, 250, 80, 210);
    },
    "grasssssyay": function() {
        for (var i = 485; i < 600; i += 5) {
            fill(lerpColor(color(50, 237, 81), color(10, 187, 41), (i - 500) / 100));
            rect(0, i, 600, 5);
        }
        filter(BLUR, 1);
        return get(0, 490, 600, 100);
    },
    "basketball": function() {
        background(0, 0);
        fill(255, 136, 0);
        strokeWeight(3);
        ellipse(300, 300, 50, 50);
        noStroke();
        fill(255, 156, 20);
        ellipse(305, 295, 39, 39);
        strokeWeight(3);
        stroke(0);
        noFill();
        line(276, 300, 323, 300);
        line(301, 275, 300, 324);
        arc(300, 337, 50, 50, 232, 311);
        arc(300, 300 - 37, 50, 50, 55, 129);
        noFill();
        strokeWeight(3);
        stroke(0);
        ellipse(300, 300, 50, 50);
        return get(272, 272, 56, 56);
    },
    "tennisball": function() {
        background(0, 0);
        fill(132, 235, 42);
        strokeWeight(3);
        stroke(0);
        ellipse(300, 300, 50, 50);
        noStroke();
        fill(137, 248, 47);
        ellipse(305, 295, 39, 39);
        strokeWeight(3);
        stroke(209, 194, 194);
        noFill();
        arc(300, 337, 50, 50, 232, 311);
        arc(300, 300 - 37, 50, 50, 55, 129);
        noFill();
        strokeWeight(3);
        stroke(0);
        ellipse(300, 300, 50, 50);
        return get(272, 272, 56, 56);
    },
    "baseball": function() {
        background(0, 0);
        fill(230);
        fill(230);
        strokeWeight(3);
        stroke(0);
        ellipse(300, 300, 50, 50);
        noStroke();
        fill(245);
        ellipse(305, 295, 39, 39);
        stroke(209, 20, 20);
        noFill();
        strokeWeight(5);
        for (var i = 2.98; i < 9.8; i += 0.7) {
            point(cos(i * 11 + 200) * 28 + 300, sin(i * 11 + 200) * 20 + 332);
        }
        for (var i = 20; i < 26; i += 0.7) {
            point(cos(i * 11 + 200) * 28 + 300, sin(i * 11 + 200) * 20 + 300 - 32);
        }
        noFill();
        strokeWeight(3);
        stroke(0);
        ellipse(300, 300, 50, 50);
        return get(272, 272, 56, 56);
    },
    "ball8": function() {
        background(0, 0);
        fill(0);
        strokeWeight(3);
        stroke(0);
        ellipse(300, 300, 50, 50);
        noStroke();
        fill(40);
        ellipse(305, 295, 39, 39);
        fill(235);
        noStroke();
        ellipse(300, 300, 30, 30);
        textAlign(CENTER, CENTER);
        textFont(createFont("Custom Bold"));
        textSize(19);
        fill(0);
        text("8", 300, 300);
        return get(272, 272, 56, 56);
    },
    "cannonball": function() {
        background(0, 0);
        fill(0);
        strokeWeight(3);
        stroke(0);
        ellipse(300, 300, 50, 50);
        noStroke();
        fill(30);
        ellipse(305, 295, 39, 39);
        fill(255, 50);
        ellipse(309, 291, 8, 8);
        return get(272, 272, 56, 56);
    },

    // template
    /*
    "": function() {
        
    },
    */
};

// what # of the loading thing it is on
var curLoad = 0;

// is the loading done
var loaded = false;


var load = function() {

    background(0, 0);


    var obj = Object.keys(imgs);

    imgs[obj[curLoad]] = imgs[obj[curLoad]]();
    curLoad++;

    if (curLoad < obj.length) {
        loaded = false;
    }

    // finish loading
    else {
        loaded = true;
        page = "logo";
    }

};

var Obstacle = function(x, type) {
    this.x = x;
    this.type = ~~type;
    this.hit = false;
    this.xFct = [0.45, 0.97, 1.6, 2.85, 1.4, 1.72][this.type];
    this.yFct = [0.01, 0.01, 1.5, 2.25, 1.46, 1.47][this.type];
    this.springBounce = 0;
    if (this.type === 5) {
        this.y = random(-550, -180);
    }
    else {
        this.y = 22;
    }
    /*
    0: mud
    1: sticky goo
    2: trampoline
    3: dynamite
    4: spring
    5: balloon
    */
};
Obstacle.prototype.draw = function() {
    switch (this.type) {
        case 0:
            fill(179, 120, 86);
            ellipse(this.x, this.y, 100, 15);
            break;
        case 1:
            fill(176, 138, 204);
            ellipse(this.x, this.y, 100, 15);
            break;
        case 2:
            // fill(0, 255, 255);
            // rect(this.x - 50, this.y - 5, 100, 10, 5);
            image(imgs.tramp, this.x - 60, this.y - 25, 120, 45);
            break;
        case 3:
            image(imgs.boom, this.x - 75 / 2, this.y - 68, 75, 90);
            break;
        case 4:
            // fill(0, 106, 255);
            // rect(this.x - 50, this.y - 5, 100, 10, 5);
            imageMode(CENTER);
            image(imgs.spring, this.x, this.y - this.springBounce / 2, 60, 40 + this.springBounce);
            imageMode(CORNER);
            break;
        case 5:
            image(imgs.bloon, this.x - 40, this.y - 50 + sin(frameCount * 0.9) * 10, 80, 210);

            break;
    }
    this.springBounce += (0 - this.springBounce) / 14;
};

var obstacles = [];

var obstacleDist = 0;

var selectedChar = 0;

var shotPower = 0;

var loseTimer = 0;

var Player = function() {
    this.x = 0;
    this.y = 0;
    this.isLaunching = true;
    this.noBounce = false;
    this.angle = 0;
    this.xVel = 0;
    this.yVel = 0;
    this.rot = 0;
    this.rotVel = 0;
    this.stuck = false;
};
Player.prototype.draw = function() {
    if (!this.isLaunching) {
        fill(0);
        noStroke();
        pushMatrix();
        translate(this.x, this.y);
        rotate(this.rot);
        imageMode(CENTER);
        image([imgs.cannonball, imgs.basketball, imgs.tennisball, imgs.ball8, imgs.baseball][selectedChar], 0, 0, 50, 50);
        imageMode(CORNER);
        popMatrix();
    }
};
Player.prototype.move = function() {
    this.rot += constrain(this.xVel * 3 + abs(this.yVel) + abs(this.y / 20), 0, 10);
    if (this.noBounce) {
        this.yVel = 0;
        this.xVel *= 0.963;
        if (abs(this.xVel) < 0.04) {
            this.xVel = 0;
            loseTimer++;
        }
        this.y = 0;
    }
    if (!this.isLaunching) {
        this.x += this.xVel;
        this.y += this.yVel;
        this.xVel *= 0.9987;
        if (!this.noBounce) {
            this.yVel += 0.1;
        }
    }
    if (this.x < -275) {
        this.xVel = this.xVel * -0.8;
        if (!this.noBounce) {
            this.yVel *= 0.55;
        }
        this.x += 3;
    }
    if (this.y > 0 && !this.noBounce) {
        this.yVel = abs(this.yVel) * -0.76;
        for (var m = 0; m < 8; m++) {
            particles.push(Particle.new(this.x + random(-45, 45) + this.xVel, random(-25, 25), color(random(52, 72), random(158, 178), random(72, 82)), random(10, 35), random(-1, 1), random(-1, 1), random(100, 200), random(-1, -2.5), random(-0.1, 0.1)));
        }
        if (this.yVel > -0.9) {
            this.noBounce = true;
        }
    }
    // println(this.xVel);
};
Player.prototype.objCollide = function() {
    for (var i = 0; i < obstacles.length; i++) {
        switch (obstacles[i].type) {
            case 0:
            case 1:
                if (ellipseEllipseCollide(this.x, this.y, 50, 50, 0, obstacles[i].x, obstacles[i].y, 100, 15, 0)) {
                    this.xVel *= obstacles[i].xFct;
                    this.yVel *= obstacles[i].yFct;
                    this.noBounce = true;
                    this.stuck = true;
                    if (obstacles[i].type === 0 && !obstacles[i].hit) {
                        for (var m = 0; m < 8; m++) {
                            particles.push(Particle.new(this.x + random(-45, 45) + this.xVel, random(-25, 25), color(random(169, 189), random(110, 130), random(76, 86)), random(8, 20), random(-1, 1), random(-1, 1), random(100, 200), random(-1, -2.5), random(-0.1, 0.1)));
                        }
                    }
                    obstacles[i].hit = true;
                }
                break;
            case 2:
                if (rectCircleCollide(obstacles[i].x - 60, obstacles[i].y - 25, 120, 45, 0, this.x, this.y, 50, 50) && !obstacles[i].hit) {
                    this.xVel = obstacles[i].xFct * 10 + abs(this.xVel);
                    this.yVel = -obstacles[i].yFct * 4.5 - abs(this.yVel);
                    this.noBounce = false;
                    obstacles[i].hit = true;
                }
                break;
            case 3:
                if (rectCircleCollide(obstacles[i].x - 75 / 2, obstacles[i].y - 68, 75, 90, 0, this.x, this.y, 50, 50) && !obstacles[i].hit) {
                    this.xVel = obstacles[i].xFct * 12 + abs(this.xVel);
                    this.yVel = -obstacles[i].yFct * 5 - abs(this.yVel);
                    this.noBounce = false;
                    obstacles[i].hit = true;
                    for (var m = 0; m < 10; m++) {
                        particles.push(Particle.new(obstacles[i].x + random(-30, 25), obstacles[i].y + random(-30, 25), color(random(80, 150)), random(26, 40), random(-0.5, 0.5), random(-0.5, 0.5), random(150, 200), random(-3.65, -2.25), random(1.6, 2.75)));
                        for (var k = 0; k < 10; k++) {
                            particles.push(Particle.new(obstacles[i].x + random(-30, 25), obstacles[i].y + random(-30, 25), color(207 + random(-30, 30), 93 + random(-20, 20), random(0, 35)), random(10, 14), random(-0.5, 0.5), random(-0.5, 0.5), random(100, 150), random(-2.5, -1.95), random(0.9, 2.5)));
                        }
                    }
                    obstacles.splice(i, 1);
                }
                break;
            case 4:
                if (rectCircleCollide(obstacles[i].x - 30, obstacles[i].y - 20, 60, 40, 0, this.x, this.y, 50, 50) && !obstacles[i].hit) {
                    this.xVel = obstacles[i].xFct * 10 + abs(this.xVel);
                    this.yVel = -obstacles[i].yFct * 4.5 - abs(this.yVel);
                    this.noBounce = false;
                    obstacles[i].hit = true;
                    obstacles[i].springBounce = -25;
                }
                break;
            case 5:
                if (ellipseEllipseCollide(this.x, this.y, 50, 50, 0, obstacles[i].x, obstacles[i].y, 65, 90, 0) && !obstacles[i].hit) {
                    this.xVel += 0.1;
                    this.yVel += 0.1;
                    this.xVel = obstacles[i].xFct * 10 + abs(this.xVel);
                    this.yVel = -obstacles[i].yFct * 4.5 - abs(this.yVel);
                    this.noBounce = false;
                    obstacles[i].hit = true;

                    for (var m = 0; m < 10; m++) {
                        particles.push(Particle.new(obstacles[i].x + random(-20, 20), obstacles[i].y + random(-40, 40), color(random(80, 150)), random(26, 40), random(-0.5, 0.5), random(-0.5, 0.5), random(150, 200), random(-3.65, -2.25), random(1.6, 2.75)));
                        for (var k = 0; k < 5; k++) {
                            particles.push(Particle.new(obstacles[i].x + random(-20, 20), obstacles[i].y + random(-40, 40), color(207 + random(-30, 30), 93 + random(-20, 20), random(0, 35)), random(10, 14), random(-0.5, 0.5), random(-0.5, 0.5), random(100, 150), random(-2.5, -1.95), random(0.9, 2.5)));
                        }
                    }
                    for (var m = 0; m < 60; m++) {
                        particles.push(Particle.new(obstacles[i].x + random(-20, 20), obstacles[i].y + random(-40, 40), color(255, 0, 0), random(1.5, 3), random(-1, 1), random(-1, 1), random(120, 175), random(-1.5, -1), random(-0.08, -0.03)));
                    }

                    obstacles.splice(i, 1);
                    // frameRate(2);
                    // this.stuck = true;
                }
        }
    }
};

var susanna = Player.new();

// main function
function Button(config) {
    this.x = config.x;
    this.y = config.y;

    this.w = config.w;
    this.h = config.h;

    this.show = config.show;

    this.clicky = config.clicky;
}

Button.prototype.draw = function() {

    // mouse collisions
    if (mouseX > this.x && mouseX < this.x + this.w && mouseY > this.y && mouseY < this.y + this.h) {

        overButton = true;

        fill(0, 30);
        noStroke();
        rect(this.x, this.y, this.w, this.h, 0, 0, 20, 0);
        if (clicked) {
            this.clicky();
        }

    }

    this.show();


};

function ballSelBtn(x, y, id) {
    this.x = x;
    this.y = y;
    this.id = id;
}
ballSelBtn.prototype.func = function() {
    fill(255, 150);
    strokeWeight(2);
    stroke(255, 180);
    if (mouseX > this.x && mouseX < this.x + 100 && mouseY > this.y && mouseY < this.y + 100) {
        fill(255, 175);
        stroke(255, 200);
        overButton = true;
        if (clicked) {
            selectedChar = this.id;
        }
    }
    if (selectedChar === this.id) {
        strokeWeight(9);
    }
    rect(this.x, this.y, 100, 100, 20);
    imageMode(CENTER);
    image([imgs.cannonball, imgs.basketball, imgs.tennisball, imgs.ball8, imgs.baseball][this.id], this.x + 50, this.y + 50);
    imageMode(CORNER);
};
/*
rect(175, 250, 100, 100, 20);
                rect(325, 250, 100, 100, 20);
                rect(250, 375, 100, 100, 20);
                rect(250 - 100 - 50, 375, 100, 100, 20);
                rect(250 + 150, 375, 100, 100, 20);
                imageMode(CENTER);
                image(imgs.cannonball, 225, 300);
                image(imgs.basketball, 375, 300);
                image(imgs.baseball, 225 - 75, 425);
                image(imgs.tennisball, 300, 425);
                image(imgs.ball8, 450, 425);
*/
var ballSels = [
    new ballSelBtn(175, 250, 0),
    new ballSelBtn(325, 250, 1),
    new ballSelBtn(100, 375, 2),
    new ballSelBtn(250, 375, 3),
    new ballSelBtn(400, 375, 4),
];

var stars = [];
var clouds = [];

// all of the buttons
var buttons = {
    customizeBall: new Button({
        x: 0,
        y: 0,
        w: 100,
        h: 100,

        show: function() {
            fill(255, 100);
            strokeWeight(3);
            stroke(255, 150);
            rect(-3, -3, 100, 100, 0, 0, 20, 0);
            imageMode(CENTER);
            image([imgs.cannonball, imgs.basketball, imgs.tennisball, imgs.ball8, imgs.baseball][selectedChar], 46, 31, 50, 50);
            imageMode(CORNER);
            textSize(16);
            outlineText("CHANGE", 46, 71, 255, 0, 20);
        },
        clicky: function() {
            page = "ballz";
            filter(BLUR, 2);
            gameLook = get(0, 0, 600, 600);
        },
    }),
    restart: new Button({
        x: 0,
        y: 0,
        w: 100,
        h: 100,

        show: function() {
            fill(255, 100);
            strokeWeight(3);
            stroke(255, 150);
            rect(-3, -3, 100, 100, 0, 0, 20, 0);
            textSize(55);
            outlineText("↺", 46, 32, 255, 0, 40);
            textSize(16);
            outlineText("RESET", 46, 71, 255, 0, 20);
        },
        clicky: function() {
            loseImg = "";
            loseTimer = 0;
            susanna.noBounce = false;
            susanna.isLaunching = true;
            susanna.xVel = 0;
            susanna.yVel = 0;
            susanna.x = 0;
            susanna.y = 0;
            stars = [];
            clouds = [];
            obstacles = [];
            hgts = [];
            obstacleDist = 0;
            hgtDist = -40;
            mtns = [];
            mtnDist = -40;

            for (var i = 0; i < 500; i++) {
                stars.push([random(-10, 610), random(-600, 610), random(1, 2.5)]);
            }
            for (var i = 0; i < 25; i++) {
                clouds.push([random(0, 2000), random(-2000, -500)]);
            }
            for (var i = 0; i < 12; i++) {
                hgts.push(random(80, 150));
            }
            for (var i = 0; i < 8; i++) {
                mtns.push([random(0, 2000), random(100, 150), random(120, 140)]);
            }
            ranStart = random(0, 1000);
        },
    }),
    rtn: new Button({
        x: 0,
        y: 0,
        w: 100,
        h: 100,

        show: function() {
            fill(255, 100);
            strokeWeight(3);
            stroke(255, 150);
            rect(-3, -3, 100, 100, 0, 0, 20, 0);
            imageMode(CENTER);
            image([imgs.cannonball, imgs.basketball, imgs.tennisball, imgs.ball8, imgs.baseball][selectedChar], 46, 31, 50, 50);
            imageMode(CORNER);
            textSize(16);
            outlineText("BACK", 46, 71, 255, 0, 20);
        },
        clicky: function() {
            page = "game";
        },
    }),
    /*
    x: new Button({
        x: ,
        y: ,
        w: ,
        h: ,
        
        show: function() {
            
        },
        clicky: function() {
            
        },
    }),
    */

};

for (var i = 0; i < 500; i++) {
    stars.push([random(-10, 610), random(-600, 610), random(1, 2.5)]);
}
for (var i = 0; i < 30; i++) {
    clouds.push([random(0, 2000), random(-2000, -500)]);
}
for (var i = 0; i < 12; i++) {
    hgts.push(random(80, 150));
}
for (var i = 0; i < 8; i++) {
    mtns.push([random(0, 2000), random(100, 150), random(120, 140)]);
}
draw = function() {
    noStroke();

    // i did
    try {

        switch (page) {

            // loading screen
            case "load":
                load();

                background(155);
                fill(255);
                textSize(60);
                textAlign(CENTER, CENTER);
                outlineText("Loading...", 300, 120, 255, 0, 20);
                textSize(65);
                outlineText((curLoad / (Object.keys(imgs)).length * 100).toFixed(1) + "%", 300, 320, 255, 0, 20);
                noStroke();
                fill(220);
                rect(0, 525, curLoad / (Object.keys(imgs)).length * 600, 75);

                break;

            case "game":
                if (!susanna.isLaunching) {
                    if (susanna.x > 0) {
                        hgtDist += (300 - susanna.x - cam.x) / 6;
                        mtnDist += (300 - susanna.x - cam.x) / 8;
                    }
                    cam.x += (300 - susanna.x - cam.x) / 1.5;
                    cam.y += (300 - susanna.y - cam.y) / 1.5;
                    cam.y = constrain(cam.y, 500, 999999);
                    cam.x = constrain(cam.x, -999999, 300);

                }
                else {
                    cam.y = 500;
                    cam.x = 300;
                }
                background(160, 250, 250);
                background(lerpColor(color(2, 102, 184), color(42, 142, 224), constrain((susanna.y + 2000), 0, 2000) / 2000));
                for (var i = 0; i < 25; i++) {
                    fill(lerpColor(color(15, 40, 85), -16619848, i / 25));
                    rect(0, -susanna.y - 2000 + 10 * i, 600, 10);
                }
                fill(15, 40, 85);
                rect(0, -susanna.y - 2000 - 11000, 600, 11000);
                pushMatrix();
                translate(0, constrain(-susanna.y - 2000 - 450, -999999, -susanna.y / 5));
                if (susanna.y < -1000) {
                    for (var i = 0; i < stars.length; i++) {
                        fill(255, 125);
                        ellipse(stars[i][0], stars[i][1] - susanna.y / 100, stars[i][2], stars[i][2]);
                        if (stars[i][0] > 603) {
                            stars[i][0] = random(-10, -7);
                            stars[i][1] = random(-600, 600);
                            stars[i][2] = random(1, 2.5);
                        }
                        if (stars[i][0] < -3) {
                            stars[i][0] = random(603, 610);
                            stars[i][1] = random(-600, 600);
                            stars[i][2] = random(1, 2.5);
                        }
                    }
                    for (var i = 0; i < stars.length; i++) {
                        stars[i][0] -= stars[i][2] * susanna.xVel / 200;
                    }
                }
                popMatrix();
                pushMatrix();
                translate(0, cam.y);
                for (var i = 7; i >= 0; i--) {
                    fill(mtns[i][2]);
                    triangle(mtns[i][0] + mtnDist, 0, mtns[i][0] + 100 + mtnDist, 0, mtns[i][0] + 50 + mtnDist, -mtns[i][1]);
                    // println(mtns[i][0] + mtnDist + cam.x);
                    if (mtns[i][0] + mtnDist < -160) {
                        mtns.splice(i, 1);
                        mtns.push([random(800, 1800) - mtnDist, random(80, 150), random(120, 140)]);
                    }
                }
                for (var i = 11; i >= 0; i--) {
                    fill(2, 143, 42);
                    ellipse(i * 60 + hgtDist + 40, 0, 60, hgts[i]);
                    if (hgtDist < -60) {
                        hgtDist = 0;
                        hgts.splice(0, 1);
                        hgts.push(random(80, 150));
                    }
                }
                popMatrix();
                pushMatrix();
                translate(cam.x, cam.y);
                for (var i = 0; i < clouds.length; i++) {
                    fill(255, 200);
                    rect(clouds[i][0], clouds[i][1], 100, 50, 20);
                    clouds[i][0] -= 0.2;
                    if (cam.x + clouds[i][0] < -150 && frameCount % 10 === 0) {
                        clouds[i][0] = -cam.x + random(1000, 2000);
                        clouds[i][1] = random(-2000, -500);
                    }
                }
                // fill(0, 255, 94);
                // rect(-cam.x, 25, 600, 100);
                // fill(23, 189, 84);
                // rect(-cam.x, -15, 600, 41);
                image(imgs.grasssssyay, -cam.x, 0, 600, 141);
                for (var i = particles.length - 1; i >= 0; i--) {
                    particles[i].draw();
                    if (particles[i].trans < 0) {
                        particles.splice(i, 1);
                    }
                }
                for (var i = 0; i < obstacles.length; i++) {
                    obstacles[i].draw();
                }
                susanna.draw();
                fill(0);
                pushMatrix();
                translate(-50, 0);
                if (susanna.isLaunching) {
                    rotate(atan2(constrain(mouseY, 0, 499) - 500, constrain(mouseX, 250, 1000) - 250));
                }
                else {
                    rotate(susanna.angle);
                }
                ellipse(0, 0, 250, 150);
                ellipse(125, 0, 40, 120);
                popMatrix();
                if ((clicked && susanna.isLaunching) && (mouseX > 150 || mouseY > 150)) {
                    susanna.isLaunching = false;
                    susanna.angle = atan2(constrain(mouseY, 0, 499) - 500, constrain(mouseX, 250, 1000) - 250);
                    susanna.xVel = cos(susanna.angle) * map(shotPower, 0, 80, 5, 25);
                    susanna.yVel = sin(susanna.angle) * map(shotPower, 0, 80, 3, 18);
                    susanna.x = cos(susanna.angle) * 125 + 250 - 300;
                    susanna.y = sin(susanna.angle) * 125 + 500 - 500;
                }
                susanna.yVel = constrain(susanna.yVel, -22, 100);
                susanna.move();
                susanna.objCollide();
                if (susanna.isLaunching) {
                    shotPower = sin(frameCount * 11 + ranStart) * 39 + 41;
                }
                strokeWeight(3);
                stroke(220);
                fill(255, 200);
                rect(-100, 480 - 500, 100, 70);
                fill(255, 50);
                stroke(0);
                rect(210 - 300, 25, 80, 20, 5);
                fill(0);
                rect(210 - 300, 25, shotPower, 20, 5);
                text(floor(map(shotPower, 0, 80, 0, 100)), 210 - 300 + 40, 0);
                popMatrix();
                fill(100);
                // ellipse(cos(atan2(mouseY - 500, mouseX - 250)) * 125 + 250, sin(atan2(mouseY - 500, mouseX - 250)) * 125 + 500, 10, 10);
                // ellipse(250, 500, 10, 10);
                fill(0);
                if (!susanna.isLaunching) {
                    textSize(22);
                    outlineText(~~(susanna.x / 30) + 1 + " m", 300, 50, 255, 0, 15);
                }
                if (susanna.x > obstacleDist + 700) {
                    obstacles.push(new Obstacle(susanna.x + random(700, 1000), ~~random(0, 6)));
                    obstacleDist = random(200, 500) + susanna.x;
                }
                // frameRate(5);
                // println(susanna.x);
                // frameRate(10);

                if (loseTimer > 150) {
                    page = "L";
                    loseImg = get();
                }
                if (gameLook === "") {
                    filter(BLUR, 2);
                    gameLook = get(0, 0, 600, 600);
                    page = "begin";
                }
                if (susanna.isLaunching) {
                    buttons.customizeBall.draw();
                }
                else {
                    buttons.restart.draw();
                }
                break;
            case "begin":
                imageMode(CORNER);
                image(gameLook, 0, 0, 600, 600);
                noStroke();
                fill(0, 50);
                rect(0, 0, 600, 600);
                textSize(80);
                outlineText("Welcome!", 300, 120, 255, 0, 100);
                textSize(30);
                outlineText("Mouse to aim.\nClick to shoot.\nTime it right.\nEverything else will work on its own.", 300, 265, 255, 0, 50);
                textSize(18);
                outlineText("click to begin.", 300, 365, 255, 0, 40);
                if (clicked) {
                    page = "game";
                }
                if (keyIsPressed && key.code === 32) {
                    page = "thumb";
                    for (var i = 0; i < 7; i++) {
                        mtns.push([random(0, 1000), random(100, 150), random(120, 140)]);
                    }
                }
                image(transImg, transImgX, 0);
                transImgX += (600 - transImgX) / 15;

                break;

            case "thumb":
                imageMode(CORNER);
                // image(gameLook, 0, 0, 600, 600);
                background(lerpColor(color(2, 102, 184), color(42, 142, 224), constrain((susanna.y + 2000), 0, 2000) / 2000));
                pushMatrix();
                translate(0, 500);
                for (var i = mtns.length - 1; i >= 0; i--) {
                    fill(mtns[i][2]);
                    triangle(mtns[i][0] + mtnDist, 0, mtns[i][0] + 100 + mtnDist, 0, mtns[i][0] + 50 + mtnDist, -mtns[i][1]);
                    // println(mtns[i][0] + mtnDist + cam.x);
                    if (mtns[i][0] + mtnDist < -160) {
                        mtns.splice(i, 1);
                        mtns.push([random(800, 1800) - mtnDist, random(80, 150), random(120, 140)]);
                    }
                }
                for (var i = 11; i >= 0; i--) {
                    fill(2, 143, 42);
                    ellipse(i * 60 + hgtDist + 40, 0, 60, hgts[i]);
                    if (hgtDist < -60) {
                        hgtDist = 0;
                        hgts.splice(0, 1);
                        hgts.push(random(80, 150));
                    }
                }
                popMatrix();
                image(imgs.grasssssyay, 0, 500, 600, 141);
                noStroke();
                fill(0, 10);
                rect(0, 0, 600, 600);
                textSize(130);
                textFont(createFont("Montserrat Bold"));
                outlineText("Cannon", 300, 120, 255, 0, 200);
                outlineText("Ball", 360, 250, 255, 0, 200);
                textSize(17);
                outlineText("good game bad thumbnail", 300, 550, 255, 0, 40);
                image(imgs.boom, 450, 400, 75 * 1.5, 90 * 1.5);
                image(imgs.tramp, 60, 465, 120 * 1.5, 45 * 1.5);
                pushMatrix();
                imageMode(CENTER);
                translate(233, 354);
                rotate(random(0, 360));
                image(imgs.cannonball, 0, 0, 70, 70);
                imageMode(CORNER);
                popMatrix();
                strokeWeight(5);
                stroke(255, 100);
                line(201, 380, 166, 423);
                pushMatrix();
                translate(10, 10);
                line(198, 380, 166, 423);
                translate(-20, -20);
                line(204, 380, 166, 423);
                popMatrix();
                if (clicked) {
                    page = "begin";
                    mtns.splice(3, 5);
                }
                break;
            case "ballz":
                image(gameLook, 0, 0, 600, 600);
                noStroke();
                fill(0, 50);
                rect(0, 0, 600, 600);
                textSize(75);
                outlineText("Ball selection", 300, 120, 255, 0, 90);
                for (var i = 0; i < ballSels.length; i++) {
                    ballSels[i].func();
                }
                buttons.rtn.draw();
                break;
            case "L":
                image(loseImg, 0, 0, 600, 600);
                noStroke();
                fill(0, 50);
                rect(0, 0, 600, 600);
                if (susanna.x <= 394) {
                    textSize(100);
                    outlineText("lol", 300, 120, 255, 0, 100);
                    textSize(32);
                    outlineText("you can still see the cannon", 300, 185, 255, 0, 60);
                }
                else if (~~(susanna.x / 30) + 1 < 150) {
                    textSize(100);
                    outlineText("Oof", 300, 120, 255, 0, 100);
                }
                else if (~~(susanna.x / 30) + 1 < 500) {
                    textSize(100);
                    outlineText("Okay", 300, 120, 255, 0, 100);
                }
                else if (~~(susanna.x / 30) + 1 < 2000) {
                    textSize(100);
                    outlineText("Good", 300, 120, 255, 0, 100);
                }
                else if (~~(susanna.x / 30) + 1 < 5000) {
                    textSize(100);
                    outlineText("Great", 300, 120, 255, 0, 100);
                }
                else if (~~(susanna.x / 30) + 1 < 10000) {
                    textSize(100);
                    outlineText("Excellent!", 300, 120, 255, 0, 100);
                }
                else if (~~(susanna.x / 30) + 1 < 20000) {
                    textSize(100);
                    outlineText("Incredible!", 300, 120, 255, 0, 100);
                }
                else {
                    textSize(100);
                    outlineText("Insane!!!", 300, 120, 255, 0, 100);
                }
                textSize(40);
                outlineText("you got", 300, 300, 255, 0, 70);
                textSize(60);
                outlineText(~~(susanna.x / 30) + 1 + "m!", 300, 355, 255, 0, 90);
                textSize(18);
                outlineText("click to play again.", 300, 405, 255, 0, 40);
                if (clicked) {
                    // reset everything
                    page = "game";
                    loseImg = "";
                    loseTimer = 0;
                    susanna.noBounce = false;
                    susanna.isLaunching = true;
                    susanna.xVel = 0;
                    susanna.yVel = 0;
                    susanna.x = 0;
                    susanna.y = 0;
                    stars = [];
                    clouds = [];
                    obstacles = [];
                    hgts = [];
                    obstacleDist = 0;
                    hgtDist = -40;
                    mtns = [];
                    mtnDist = -40;

                    for (var i = 0; i < 500; i++) {
                        stars.push([random(-10, 610), random(-600, 610), random(1, 2.5)]);
                    }
                    for (var i = 0; i < 25; i++) {
                        clouds.push([random(0, 2000), random(-2000, -500)]);
                    }
                    for (var i = 0; i < 12; i++) {
                        hgts.push(random(80, 150));
                    }
                    for (var i = 0; i < 8; i++) {
                        mtns.push([random(0, 2000), random(100, 150), random(120, 140)]);
                    }
                    ranStart = random(0, 1000);
                }
                break;
                // logo screen
            case "logo":

                image(bck, 0, 0);
                imageMode(CENTER);
                for (var i = 0; i < logoImgs.length; i++) {
                    pushMatrix();
                    translate(logoImgs[i][3] + 15, logoImgs[i][4]);
                    image(logoImgs[i][0], 0, 0);
                    popMatrix();
                    if (logoImgs[i][5]) {
                        logoImgs[i][3] += (logoImgs[i][1] - logoImgs[i][3]) / 10;
                        logoImgs[i][4] += (logoImgs[i][2] - logoImgs[i][4]) / 10;
                    }
                }
                if (logoTimer < 180) {
                    logoImgs[logoTimer * 5][5] = true;
                    logoImgs[logoTimer * 5 - 1][5] = true;
                    logoImgs[logoTimer * 5 - 2][5] = true;
                    logoImgs[logoTimer * 5 - 3][5] = true;
                    logoImgs[logoTimer * 5 - 4][5] = true;
                }
                imageMode(CORNER);
                if (logoTimer > 60) {
                    for (var i = 0; i < presents.length; i++) {
                        textSize(height / 15);
                        textFont(createFont("Montserrat Bold"));
                        fill(255);
                        text(pMsg[i], presents[i][2], presents[i][3]);
                        if (logoTimer > 135) {
                            presents[i][2] += (presents[i][0] - presents[i][2]) / 15;
                            presents[i][3] += (presents[i][1] - presents[i][3]) / 15;
                        }
                    }
                }
                if (logoTimer > 280) {
                    transImg = get(0, 0, width, height);
                    page = "game";
                }
                logoTimer++;

                break;

        }

        // mouse interaction
        if (overButton) {
            cursor(HAND);
        }
        else {
            cursor(ARROW);
        }
        clicked = false;
        overButton = false;
        

        // show frame rate
        fill(0);
        textSize(20);
        text(this.__frameRate.toFixed(1), 30, 585);

    }
    catch (e) {
        println(e);
    }
};

mouseClicked = function() {
    clicked = true;
};
keyPressed = function() {
    keys[keyCode] = true;
};
keyReleased = function() {
    keys[keyCode] = false;
};
//}
// why do these always come out to be so long
