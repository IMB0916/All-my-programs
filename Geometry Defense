/**
 * 
 * 
 * ███ ██ ███ █   █ ██ ███ ███ █ █    ██▄ ██ ██ ██ █  █ ██ ██
 * █ ▄ █▄ █ █ ██▄██ █▄  █  █▄▀ █▄█    █ █ █▄ █▄ █▄ ██▄█ █▄ █▄
 * █▄█ █▄ █▄█ █ █ █ █▄  █  █ █  █     ██▀ █▄ █  █▄ █ ▀█ ▄█ █▄
 * 
 * 
 * SP @Prodigy6 - 2023
 * 
 * wow, thank you all for the support :D
 * this means a lot =)
 * 1st on the hl (1.10) 36
 * still 1st (1.11) 62
 * dropped to 2nd (1.12) 85
 * fell to 9th (1/13) 111
 * 
 * For all of you skeptics, someone actually found the Easter Egg o.O
 * Congrats to Great Eagle :D
 * 
 * WARNING!!
 * THIS GAME IS LONG(ISH)!
 * BE PREPARED TO SPEND 20+ MINUTES FINISHING IT
 * 
 * also 2nd warning:
 * ONLY MEDIUM MODE SCORES COUNT FOR THE LEADERBOARD
 * idc if you think i say it too much
 * 
 * 
 * ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ LOOK DOWN THERE ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
 * 
 * also, LMK IF YOU FIND THE EASTER EGG !!!
 * It is either hidden in the code or the game.
 * and it is quite hidden
 * i bet none of you will find it (yes that is a challenge) and if you do tell me where you found it (idc if you spoil)
 * 
 * ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ LOOK UP THERE ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑
 * 
 * and not an easter egg but i left a bunch of weird/random/sarcastic comments in the code and i'd love to see which ones you discover
 * 
 * This game is a tower defense game :)
 * 
 * I hope you enjoy
 * 
 * uh whatelse
 * never press a key on the menu, it just goes to the thumbnail, which is unreturnable.
 * 
 * It is a tough game, so good luck :)
 * especially on hard xD
 * easy is very very very easy so if you are an infant you could probably beat it
 * 
 * if you get a good score, then let me know and I can put it on the leaderboard (read line 16) :)
 * 
 * this is my longest program by a lot, clocking in at almost 6900 lines but to be fair, i did clean up the code (lots of line breaks to separate things if you ever want to look) so it is probably 3-4k ish normally.
 * 
 * This game also has sounds. I think I implemented it fairly well, given the low amount of options.
 * 
 * the menu transition is kind of long, i get it, but i wanted a "grand opening"
 * no DO NOT ASK
 * i am not removing it or making it skippable
 * you can wait eight seconds
 * 
 * uhh if you want a hint on the easter egg (even though all the time i spent hiding it will go to waste andddd nobody will ever try to look for it) then here is my hint:
 * actually lol how do i hint at this
 * it will not sound very poetic lol
 * um
 * ok
 * "You're looking in the wrong spot"
 * hows that for a good hint >:)
 * 
 * 
 * 
 * my best score on easy is 16975
 * my best on hard was 10154 (with a precarious 3 lives remaining)
 * 
 * 
 * @DATES {
 *  Started: 10/7/22
 *  Finished: 12/31/22
 *  Released: 1/10/23
 * }
 * 
 * @CHALLENGES {
 * If you're looking for a challenge, try these:
 *  Only cannons (or only of some other tower)
 *  No upgrades
 *  No super / blaster towers
 *  One life only (if you lose one life you lose the whole challenge)
 *  Beat hard mode lol (i did once)
 *  Finish without losing a single life (easy mode is easy, medium is pretty tough, and hard is probably impossible)
 *  Make a rainbow array of towers (cannon > sniper > blaster > machine gun > freezer > super)
 *  Upgrade a super tower to max (this is very expensive) but pretty op
 *  Max out every tower
 *  Get 10000 coins (not total, have the number in the bottom left, this is not that tough in easy mode)
 * }
 * 
 * 
 * "useful" info
 * 
 * v
 * 
 * 
 * 
 * vvv
 * 
 * 
 * 
 * vvvv
 * 
 * 
 * GAME_NOTES {
 * 
 * 
 * @TOWER_STATS
 * @_CANNON {
 *    $25
 *    RANGE: 90
 *    RELOAD: 30 (3 P/S)
 *    DAMAGE: 8 (24 P/S)
 * }
 * @_MACHINE_GUN {
 *    $75
 *    RANGE: 100
 *    RELOAD: 6 (15 P/S)
 *    DAMAGE: 4.25 (63.75 P/S)
 * }
 * @_SENTRY {
 *    $150
 *    RANGE: 100
 *    RELOAD: 18 (5 P/S)
 *    DAMAGE: 20 (100 P/S)
 * }
 * @_FREEZER {
 *    $200
 *    RANGE: 75
 *    RELOAD: 35 (2.6 P/S)
 *    DAMAGE: 7.5 (19.5 P/S)
 *    FREEZING TIME: 2.5 sec (50% spd)
 * }
 * @_SNIPER {
 *    $250
 *    RANGE: 200
 *    RELOAD: 100 (0.7 P/S)
 *    DAMAGE: 100 (105 P/S)
 * }
 * @_BLASTER {
 *    $325
 *    RANGE: 55
 *    RELOAD: 16 (5.6 P/S)
 *    DAMAGE: 94 (526.4 P/S)
 * }
 * @_SUPER {
 *    $650
 *    RANGE: 165
 *    RELOAD: 21 (4.3 P/S)
 *    DAMAGE: 135 (580.5 P/S)
 * }
 * 
 * 
 * @BEST_MAP
 * no clue
 * the first map is bigger but the second map allows for much more efficient tower coverage.
 * 
 * 
 * @WHICH_TOWER_DO_I_BUY???
 * The rating is based off of the essential result PER DOLLAR. THIS IS THE RATING OF THE BEST DEALS... THIS DOES NOT MEAN THAT THE CANNON DOES MORE DAMAGE THAN THE SENTRY. Essentially, the highest rating will be the towers with the best deals. Keep in mind that just because a tower may be rated high does not mean it will be effective!
 * Frankly i didn't intend for the super tower to be so overpowered but it fits its name ig :)
 * Tower Name..........Overall Rating
 * Super...............100
 * Cannon..............74.3
 * Blaster.............60.9
 * Machine Gun.........57.8
 * Sniper..............48.96
 * Sentry..............45.4
 * 
 * @THE_GAME_IS_BUGGING!!! 
 * No, it's probably not. I have playtested this game for far too long, but I suppose there is a small chance. Here are some features you may think are glitches:
 *   Tower total damage does not line up with individual damage -- this is because if an enemy dies, it only takes as much health as it does to kill. Enemy health does not go negative
 *   The backgrounds are different -- yes, they are. For some reason i made 2 backgrounds instead of 1.
 *   The enemy looks dead! But it didn't die -- No, the enemy is not dead. It just has a small fraction of its health remaining. IF you want to see individual percentages, you can enable the debug mode variable.
 *   The tower is missing the enemies -- Yes, it can do that. This is about placing your tower well, as the enemies are moving targets they are hard to hit. Just place them better.
 *   The enemies / towers look blurry or pixely -- Yes, unfortunately. This is just a fact of life, nothing i can do about it. (If they are to maintain their size). If you'd rather the game lag a lot because of the lack of images, then feel free to delete the entire loading screen :)
 *   It's lagging! If it is actually lagging, try closing tabs and plug your computer in. Turn off particles, too. If this still persists then please let me know.
 *   Why does the enemy health not match what it says in the code below -- Becuase you're playing on either easy or hard mode, which modifies the health of the enemies.
 *   Why is it so loonngngnngnnnn???/? -- yes, i made it long(ish) but imagine if there were 3x the waves.
 *   I found a bug/typo/mistake (that seems unintentional)! then please tell me
 * 
 * @NOT_ADDING
 * so don't ask:
 *    Fast forward
 *    More towers/enemies
 *    The ability to move towers
 *    Leaderboard for other modes (medium is the standard, easy or hard is just for fun or challenge), but feel free to make an unofficial one in the t+t
 *    
 * 
 * @UPGRADES
 * Upgrading a tower starts at a set price (the tower price * 2/3) and [the price] increases by 1.3x each time.
 * It multiplies the range, damage, reload, and freezing time when applicable by 1.3x its previous value, each. This adds up to:
 * after
 * 0 upgrades: 1x eveything (normal)
 * 1 upgrade: 1.3x everything
 * 2 upgrades: 1.69x
 * 3 upgrades: 2.2x (maxed)
 * You can upgrade a tower 3 times before it becomes maxed out and un-upgradeable.
 * 
 * @MODES
 * There are three modes, easy, medium, and hard.
 * Easy --
 *   150 coins
 *   50 lives
 *   All enemy health is reduced to 55% (e.g. if health is 100 it is now 55)
 * Medium --
 *   100 coins
 *   30 lives
 *   All enemy health is normal
 * Hard -- 
 *   75 coins
 *   20 lives
 *   All enemy health is increased to 130% (e.g. if health is 100 it is now 130)
 * 
 * 
 * @SELLING
 * Selling a tower gives you back 75% of what you have spent on it. This includes the original purchase and the upgrades. There is no way to "move" a tower, so to sell it is the only way to free up a space.
 * 
 * 
 * @FREEZING
 * The freezer tower originates at 2.5 seconds for a freeze, which makes the enemy go at half speed. This can be upgraded to up to 4.3 seconds (so very OP).
 * 
 * 
 * @COLLISIONS
 * You may (by that i mean definitely not) be asking, how do things collide?
 * do not be mean to me i wanted to make things look thorough
 * for the range of the tower, if the radius of the enemy (its outline) is touching the circle of the radius of the tower (you can find it by hovering over whatever tower you want) then it will lock on (see right below for more details).
 * bullets do the same thing. As soon as the bullet touches the radius of the enemy, the bullet disappears (no multi-piercing bullets, sadly) and the enemy is inflicted the appropriate amount of damage.
 * 
 * 
 * @TOWER_AI
 * Towers will immediately lock onto the first enemy they see, and fire bullets directly at that enemy until either
 * -That enemy goes out of range OR
 * -That enemy dies
 * And no, I will not be modifying it so don't ask
 * 
 * 
 * @SCORING
 * Your score goes as such:
 *  1) All of your towers are sold at the normal value (how you would sell them normally), and instead of getting coins you get that value added to your score.
 *  2) Your coins are transferred into your score -- 1 coin = 1 point, 1000 coins = 1000 points.
 *  3) Your health gets sold (wow that sounds morbid) -- one life is equal to 75 points.
 * 
 * @RANDOM_FACTS_THAT_YOU_DIDNT_CARE_ABOUT {
   * The background has remained unchanged throughout the entire gamemaking's process
   * I added the settings page, then removed it, and then added it back again at one point
   * The super tower was originally priced at $500
   * The machine gun tower used to be the worst in the game, but I made it a lot better
   * For a long time, I just had the towers & enemies as circles, but that also got fixed
   * There are two images for all the enemies -- one normal and one frozen (i used an image tool to get the coloring)
   * Originally, the medium mode was going to start with 75 coins and 20 lives
   * i have never visited japan
   * Originally, the only difference between the two modes was just how much coins & health you started with
   * Nobody will read this sentence (if you do then lmk lol)
   * I contemplated making an "impossible" mode with just 1 life... let me know if you want that(?)
   * Tower upgrades used to be awful, but I improved them so you could actually use them.
   * For the longest time, I had the tower stats page button without an x (idk i am running out of ideas)
   * alot of this game took inspiration from mushy's "dessert defense"
   * i think this is my best program
   * There was once a setting named "idk", and the caption was "does not do anything". But I removed it when I added sound.
   * i love math
   * i hate math
   * The only enemies with names are the tank and supertank.
   * This program is the first time I ever used KA's default sounds
   * You need 14,603 coins to buy one of each tower, including upgrades
   * gesundheit is one of my favorite words
   * Once I got stuck for almost four days on a bug with bullets shooting (i forgot how to use atan2(), kind of a pain but got it all figured out eventually)
   * If you think the menu transition is long, it used to be almost double the length (you're welcome >:)
   * The lowest (non-negative) number you can't find in this program is the number 106 (besides that right there)
   * 133 is the next
   * the highest negative is -9
   * there are over 100,000 spaces in this program (but ig that includes indents (1 indent = 4 spaces) and stuff too)
   * the loading screen is 100% real
   * i have logs of a lot of the older versions (when it was still in development) if this program (if you're curious, maybe i release some of them???)
   * this is not the easter egg
   * But there is an easter egg
   * and if you find it... idk you can be featured in the code or smth idrc
 * }
 * 
 * @MATH_FOR_WHICH_TOWER_IS_THE_BEST {
 * 
 * Using math you can do:
 * (90/x)*y/z
 * with
 * x=reload
 * y=damage
 * z=price
 * Which decides how much damage per second per dollar spent (the higher the better):
 * Blaster: 1.63
 * Cannon: 0.96
 * Super: 0.89
 * Machine Gun: 0.85
 * Sniper: 0.36
 * Sentry: 0.66
 * 
 * BUT that does not take range into account.
 * 
 * Which is done like this:
 * xy
 * with
 * x=range
 * y=above result (dpspds)
 * 
 * Which comes out to:
 * Super: 146.9
 * Blaster: 89.5
 * Cannon: 86.4
 * Machine Gun: 85
 * Sniper: 72
 * Sentry: 66.7
 * 
 * then, you can just slightly upscale it for your rating you see above (*0.68)
 * }
 * 
 * @LITERAL_STUPID_POEM_WHY_DID_I_DECIDE_TO_MAKE_THIS {
 * here is a [beautiful] poem about the horrible, arduous things the poor towers in the game have to go through
 * okokokokok before you bully me about how stupid it sounds
 * you do not understand how boring it was waiting nineteen years for me to release this
 * note to self: no point in making it release in two weeks when it can be one
 * dumb decisions run rampant in this brain
 * it literally makes zero sense lmao, nobody will understand its true meaning
 * 
 * Every wave,
 * Any way that they could be stopped,
 * Shooting bullets, mass quantities,
 * Tanks, but mindless,
 * Enemies went past, lives lost,
 * Ridiculous quantities,
 * Every wave,
 * Getting harder,
 * Getting tougher
 * 
 * }
 * 
 * }
 * 
 * 
 **/



function tutorial  () {
    
    /**
     * 
     * IF YOU ARE BRAND NEW TO THE GAME, THEN READ THIS TUTORIAL
     * IT IS HELPFUL IN STARTING OFF YOUR GAME :D
     * 
     * 
     * 1) As soon as you start the game, you go to the bottom of the screen and hover over the shop.
     * 2) The shop will open up. Depending on your mode, select either a machine gun or a cannon. (If you are on easy then you can probably put down machine guns, but if you are on medium or hard stick with cannons for now).
     * 3) Hover out of the shop, and then place the tower on one of the grid spots near the path. Try to think strategically -- what placement will give you the most coverage on the path?
     * 4) Once you have purchased a sufficient enough towers (you should spend most if not all of your coins), select "next wave".
     * 5) Once you have started the wave, watch your towers tear down the enemies.
     * 6) Once the wave is complete, you will get a menu giving you a small coin bonus per wave, which will increase gradually.
     * 7) There are 32 waves, good luck!
     * 
     * Other info:
     * When an enemy goes off the screen, then you will lose a life... if your life counter reaches zero then you lose.
     * 
     * Click on a tower to view its statistics, upgrade, or sell it.
     * 
     * The super tower is the best tower
     * 
     * Read above code stuff if you haven't already.
     * 
     * questions? ask me in the t&t :)
     * 
     * also find the easter egg lol
     * 
     * 
     * 
    **/
}






// code {


// if you don't like the fancy transition
// opts for an uglier one
// idk its fine its pretty laggy
var low_lag_transition = false;

// it just shows some random stuff*
var debug_mode = false;

// *not actually ever used


/**
 * CONSTANTS
 * ^what the name suggests
 **/
frameRate(90);
// smooth();
size(600, 600, P2D);


/** SCORE VARIABLES **/
// your real score
var scoar = 0;

// variables for the scoring animation, if you actually finish the game and stop reading the code because its boring and you have a life
var scorTim = 0;
var scorIdx = -1;

/** LOGO VARIABLES **/
var logoImgs = [];
var bck;
var presents = [];
var pMsg = ["P", "R", "E", "S", "E", "N", "T", "S"];
var transImg, transImgX = 0.1;
var logoTimer = 1;


/** ANIMATION VARIABLES **/
// the animation for if you finish the game, scoring page
var lAnim = [-1000, 2000, -1000, 1200, 0];

// the settings for the transitions if you open a few particular pages
var pageTrans = {
    
    // game settings page
    setX: 100,
    setXT: 0,
    setXB: 125,
    setXBT: 0,
    setBck: 100,
    setBckStrk: 0.01,
    setBckFill: 0,

    // towers
    towY: [0, 0, 0, 0, 0, 0, 0],
    towYTimer: [0, 5, 11, 18, 26, 35, 45],
    towYT: 0,

    // tower stats
    towS: 100,
    towST: 0,
    towXB: 125,
    towXBT: 0,
    accMTX: 425,
    accMTT: 0,
    accMTBar: 0,
    
    // menu transitions
    geometryTitle: -300,
    defenses: [800, 820, 842, 886, 932, 980, 1030],
    path: -1000,
    towerPos: -1001,
    towerRot: 1000,
    bullet: 350,
    menuBtns: 300,

};


/** SELECTION VARIABLES **/
// which map is selected
var selMap = 0;

// which mode is selected
// easy = 0, medium = 1, hard = 2
var selMode = 1;


/** 
 * IMAGE DRAWING VARIABLE
 * Gets cached in the loading screen
 **/
var imgs = {};


/** MOUSE VARIABLES **/
// mouse is clicked
var clicked = false;

// the cursor
var cursorTyp = "d";

// for the volume slider
var mouseWasOut = false;


/** WAVE VARIABLES **/
var wave = {

    // the duration of the wave
    waveTimer: 0,

    // what wave # you are on
    waveNum: 0,

    // guess
    started: false,
    ended: false,

    // what number of the enemies of the wave is being added
    prog: 0,

    // how long the wave has been done for
    doneTimer: 0,

};

var waveStats = {
    
    att: 0,
    hit: 0,
    dmg: 0,
    coins: 0,
    
};


/** YOUR STUFF **/
var mystats = {

    // ok if you really need a comment here -_-
    coins: 1000,
    health: 30,

};


/** ENEMY VARIABLES **/
// the list of enemies
var enemys = [];

// the coordinates of the enemies, for finding a new one once one has gone out of range (math is fun)
var enemyCoords = [];


/** TOWER VARIABLES **/
// the list of towers
var towers = [];

// the prices of towers
var towerPric = [25, 75, 150, 200, 250, 325, 650];

// the ranges
var towerRan = [90, 100, 100, 75, 200, 55, 165];

// if you cannot place a tower
var cannotTower = false;

// the tower you are upgrading
var towerUp = null;

// the selected tower
var selTower = null;


/** LOADING VARIABLES **/
// what you see
var whatIsBeingLoaded = ["Background 1", "Cannon (1/4)", "Cannon (2/4)", "Cannon (3/4)", "Cannon (4/4)", "Machine Gun (1/4)", "Machine Gun (2/4)", "Machine Gun (3/4)", "Machine Gun (4/4)", "Sentry (1/4)", "Sentry (2/4)", "Sentry (3/4)", "Sentry (4/4)", "Freezer (1/4)", "Freezer (2/4)", "Freezer (3/4)", "Freezer (4/4)",   "Sniper (1/4)", "Sniper (2/4)", "Sniper (3/4)", "Sniper (4/4)", "Blaster (1/4)", "Blaster (2/4)", "Blaster (3/4)", "Blaster (4/4)", "Super (1/4)", "Super (2/4)", "Super (3/4)", "Super (4/4)", "Enemies (1/9)" , "Enemies (2/9)" , "Enemies (3/9)" , "Enemies (4/9)", "Enemies (5/9)", "Enemies (6/9)" , "Enemies (7/9)" , "Enemies (8/9)", "Enemies (9/9)", "Coin", "Heart", "Path", "Frozen Enemies (1/9)" , "Frozen Enemies (2/9)" , "Frozen Enemies (3/9)" , "Frozen Enemies (4/9)" , "Frozen Enemies (5/9)" , "Frozen Enemies (6/9)" , "Frozen Enemies (7/9)" , "Frozen Enemies (8/9)" , "Frozen Enemies (9/9)", "Background 2", "Center Images", "Settings", "Main Title", "Leaderboard", "Map Thumbnails (1/2)", "Map Thumbnails (2/2)", "Customizer Title", "Masking (1/4)", "Masking (2/4)", "Masking (3/4)", "Masking (4/4)", "Leaderboard Title", "Logo (1/3)", "Logo (2/3)", "Logo (3/3)", "DONE!"];

// the loading stage
var loadAmt = 0;

/** MISCELLANEOUS VARIABLES **/
// what page is being shown
var page = "load";

// the y of the shop
var shopY = 600;



/**
 * COLLISIONS
 * These are the basis of most of the collisions
 **/
function cursorCollide(x, y, w, h) {

    return mouseX > x && mouseY > y && mouseX < x + w && mouseY < y + h;

}

function circleCollide(x1, y1, s1, x2, y2, s2) {

    return dist(x1, y1, x2, y2) < (s2 + s1) / 2;

}


/** 
 * TRANSITIONS
 * The page transitions, when you click a button and the screen splits up and stuff moves and slides away revealing another page
 **/
// low lag transition
function transy() {

    this.imgs = [];
    this.imgVels = [];
    this.imgPos = [];

    for(var i = 0; i < 600; i += 50) {

        this.imgs.push(get(i, 0, 50, 600));
        this.imgVels.push(i % 100 === 0 ? -0.45 : 0.45);
        this.imgPos.push(0);
        
    }

}

transy.prototype.draw = function() {

    for(var i = 0; i < this.imgs.length; i++) {
        
        image(this.imgs[i], i * 50, this.imgPos[i], 50, 600);
        
        this.imgVels[i] *= 1.02;
        this.imgPos[i] += this.imgVels[i];
        
    }

};

var transitions = [];

// normal transition
var trans = {
    img: "",
    started: false,
    fil: 255,
};


/**
 * LEADERBOARD
 * The leaderboard
 **/
var ldB = [
    
    ["JY", 13072],
    ["manabe345", 12599],
    ["XXxxAngelic_D...", 13564],
    ["Dominic R.", 13614],
    ["charles.sperbeck.iii", 14103],
    ["theBTG15", 12531],
    ["Chum", 14174],
    ["SillySeth14", 12347],
    ["sk1234567890", 13486],
    ["JRamirez", 10521],
    ["Sir TypesALot", 13440],
    ["Reader", 7950],
    ["Thomas Cunningham", 13181],
    ["text(\"poiseCoding...", 14213],
    ["Digital", 14313],
    ["Mr. Mustache", 13595],
    ["YX9500", 13782],
    ["TheLegoMango", 12286],
    ["Josiah Pond", 12227],
    ["0533545", 12467],
    ["redFlower13", 13103],
    ["Jibanyanc", 13976],
    ["Ranger Rider", 12710],
    ["Electric Dolphin", 14365],
    ["Vishnu Pakiru", 6484],
    ["GᴀʟᴀxʏRᴀɴɢᴇʀ", 13051],
    ["dahn.gil.och", 5193],
    ["Cookie", 12337],
    ["WinstonWinner", 12759],
    ["StuffStash", 12926],
    ["jiangfeng", 13774],
    ["𝗧𝗵𝗲 𝗟𝗶𝗰𝗵 𝗞𝗶𝗻𝗴", 11910],
    ["Lure King", 14227],
    ["SP", 13968],
    ["ekao0003", 13478],
    ["Fireball my dear sir", 13676],
    ["Catchme", 12118],
    ["DOOMraider2020", 4580],
    ["New Top Games", 13487],
    ["thebalex", 10545],
    ["Dandelion Fire Coding", 13328],
    ["bravo bravo", 12648],
    ["Seth | Flightsong Studios", 13034],
    ["Tolkien0103", 13125],
    ["master9999999", 13283],
    ["Pixel Imperfect", 10177],
    ["kayden rayner", 13454],
    ["lee.josiah", 9548],
    ["hayze24", 13443],
    ["benjamin.lehman", 13244],
    ["math geek smart guy", 12392],
    ["Eryn", 13703],
    ["Mr. Deccy", 11524],
    ["Ufo-88", 12028],
    ["evangatiger", 11088],
    ["Ninja Programming", 13523],
    ["ice to meet you", 14363],
    ["Ravenclaw_Johnny", 13378],
    ["Taders09", 8172],
    ["BoogaBrother", 13104],
    ["gavinwin1983", 12332],
    ["You", 0],
    
];

var leadScroll = 0;

// the variable used for the bubble sort in the leaderboard
var arrSwap;

// the best scores for both maps
// ok its not exactly leaderboard but who cares
var bestScores = [0, 0];


/**
 * OUTLINE TEXTS
 * The first one is the standard outline text
 * But the second one has a thicker outline, and is mostly only used in the "defense" of the menu
 **/
 
// I was going to use ctx.strokeText but idk what was happening, but it was "spiking" with the M's and W's, and other shapes
// if someone can fix that and make this more efficient, pls lmk
function outlineText(msg, x, y, oCol, t) {

    fill(0, (t / 3) || 255);
    for(var i = -2; i <= 2; i++) {
        for(var j = -2; j <= 2; j++) {

            fill(0, t / 4 || 255);
            text(msg, x + i, y + j);

        }
    }

    fill(oCol || 255, t || 255);
    text(msg, x, y);

}

function thickerOutlineTextThing (msg, x, y) {

    fill(0);
    for(var i = -5; i <= 5; i++) {
        
        for(var j = -5; j <= 5; j++) {
            
            fill(0);
            text(msg, x + i, y + j);
            
        }
        
    }

    fill(250);
    text(msg, x, y);

}


/**
 * TINY COINS
 * The small coins that you see after you have defeated an enemy
 **/


function tinyCoin(x, y, b) {
    
    this.pos = new PVector(x + random(-6, 6), y + random(-6, 6));

    this.bnty = b;
    
    this.die = false;
    
    this.xV = random(35, 60);
    this.yV = random(30, 55);

}

tinyCoin.prototype.draw = function() {

    image(imgs.coin, this.pos.x - 14, this.pos.y - 14, 28, 28);

    this.pos.x += (35 - this.pos.x) / this.xV;
    this.pos.y += (535 - this.pos.y) / this.yV;

    // if it reached its destination
    if(circleCollide(this.pos.x, this.pos.y, 5, 35, 535, 20)) {
        this.die = true;
    }

};

var tinyCoins = [];


/**
 * PRICE DROP
 * The small number you see dropping from your coins after you make a purchase
 **/
function pricDrop(x, y, cond) {

    this.cond = cond;
    
    this.pos = new PVector(x, y);

    this.xV = random(0.1, 1);
    this.yV = random(-1, -0.25);

    this.rot = 0;
    this.rV = random(-3, 3);
    
    // life span, cuz apparently some sort of bug appeared that i missed lol
    this.life = 0;

}

pricDrop.prototype.draw = function() {
    
    this.life ++;

    textSize(22);

    pushMatrix();
    translate(this.pos.x, this.pos.y);
    rotate(this.rot);

    outlineText(this.cond, 0, 0, color(255, 100, 100));

    popMatrix();

    this.pos.x += this.xV;
    this.pos.y += this.yV;

    this.yV += 0.05;
    this.xV *= 1.009;

    this.rot += this.rV;
    this.rV *= 1.015;

};

var pricD = [];


/** 
 * PARTICLE FUNCTION
 * copied from my halloween game
 **/
function Particle(x, y, col) {
    
    this.pos = new PVector(x + random(-8, 8), y + random(-8, 8));

    this.col = col;

    this.siz = random(2, 7);
    
    this.rot = 0;

    this.xVel = random(-0.4, 0.4);
    this.yVel = random(-0.4, 0.4);
    this.rVel = random(-0.4, 0.4);

    this.opac = random(225, 255);
    this.opacVel = random(-3, -0.15);

}

Particle.prototype.draw = function() {

    fill(this.col, this.opac);
    rectMode(CENTER);
    pushMatrix();
    translate(this.pos.x, this.pos.y);
    rotate(this.rot);
    rect(0, 0, this.siz, this.siz);
    popMatrix();
    
    rectMode(CORNER);
    this.rot += this.rVel;
    this.pos.x += this.xVel;
    this.pos.y += this.yVel;

    this.opac += this.opacVel;
    this.opacVel *= 1.005;

};

var particles = [];

/**
 * SETTINGS VARIABLES
 * First the slider thing
 * and then the rest of the other stuff
**/

var slider = function(x, y, def) {
    
    this.pos = new PVector(x, y);
    
    // what state it is, but reversed because axcidentz
    this.def = def;
    
    // background color
    this.bckolor = this.def === false ? 225 : 30;
    
    // for sm00thness
    this.bcT = this.def === false ? 225 : 30;
    
    // ok guess
    this.onOffX = this.def === true ? this.pos.x + 19 : this.pos.x - 19;
    
    this.output = !this.def;
    
};

slider.prototype = {

    draw: function() {
    
        noStroke();
        fill(225 - this.bckolor, this.bckolor, 30);
        rect(this.pos.x - 40, this.pos.y - 20, 80, 40, Infinity);
        
        fill(255, 200);
        ellipse(this.onOffX, this.pos.y, 31, 31);
        
        fill(225 - this.bckolor, this.bckolor, 30);
        textSize(11);
        textAlign(CENTER, CENTER);
        text(this.onOffX < this.pos.x ? "OFF" : "ON", this.onOffX, this.pos.y);
        
    },
    
    func: function() {
        
        this.bckolor += (this.bcT -  this.bckolor) / 10;
    
        if(this.def) {
            this.onOffX -= (this.onOffX - this.pos.x + 19) / 10;
        }
        else {
            this.onOffX -= (this.onOffX - this.pos.x - 19) / 10;
        }
        
        if(cursorCollide(this.pos.x - 40, this.pos.y - 20, 80, 40)) {
            
            cursorTyp = "h";
            if(clicked) {
                this.clicked();
            }
            
        }
        
        this.output = this.onOffX > this.pos.x;
    },
    
    clicked: function() {
        
        // reveursale
        if(this.def === false) {
            this.bcT = 30;
        }
        else {
            this.bcT = 225;
        }
        
        this.def = !this.def;
        
    }
};

var sliders = [];

sliders.push(new slider(385, 200 + (55 / 2), false));
sliders.push(new slider(385, 260 + (55 / 2), false));
sliders.push(new slider(385, 320 + (55 / 2), true));

var setRot = 0;
var setRotVel = 0.1;

var volume = 0.75;

// volume slider
var pressed = false;


// list of sounds
var sounds = [
    
    getSound("rpg/coin-jingle"), // purchase
    getSound("retro/coin"), // gain coin
    getSound("retro/hit1"), // enemy hit
    getSound("rpg/battle-spell"), // end wave
    getSound("retro/rumble"), // enemy gets past
    getSound("retro/boom2"), // enemy perishes
    getSound("retro/boom1"), // tower scoring

];

// make noise
var doSound = function(idx) {
    
    if(sliders[2].output) {
        playSound(sounds[idx]);
    }
    
};

/**
 * HOVER TEXTS
 * What you see when you hover over a tower in the menu
 **/
function hovTex(msg) {

    this.msg = msg;

}

hovTex.prototype.draw = function() {

    pushMatrix();
    translate(mouseX + 10, mouseY + 7.5);

    fill(235);
    strokeWeight(1);
    stroke(20);
    rect(0, 0, 75, 45);

    fill(0);
    textFont(createFont("Segoe UI Light"));
    textSize(10);
    text(this.msg, 1.5, -5, 72, 50);

    popMatrix();

};

var hovTexs = [];


/**
 * BUTTON FUNCTION
 * Also copied from another program, not sure which one but you can probably find out if you actually care lol
 **/
function Button(config) {
    
    this.pos = new PVector(config.x, config.y);
    
    this.dimensions = new PVector(config.w, config.h);

    // if hovering
    this.ho = false;

    // to see
    this.show = config.show;

    // if click
    this.clicky = config.clicky;

    // if hover
    this.hov = config.hover || loop;

}

Button.prototype.draw = function() {
    
    
    this.ho = false;

    textFont(createFont("SP Custom Bold"));

    this.show();

    if(cursorCollide(this.pos.x, this.pos.y, this.dimensions.x, this.dimensions.y)) {

        this.ho = true;
        this.hov();

        if(clicked) {
            this.clicky();
        }

    }

};

/**
 * DRAWING TOWERS
 * The following code is used to draw towers
 * I used image caching to help reduce lag
 **/
var towerImgs = [];
function drawTower(x, y, siz, typ, upg) {
    
    var up = upg || 0;
    image(towerImgs[typ * 4 + up], x, y, siz, siz);
    
}


/**
 * DRAWING ENEMIES
 * The following code is used to draw enemies
 * I used image caching to help reduce lag
 **/
var enemyImgs = [];
var enemyFrozImgs = [];

function drawEnemy(x, y, siz, typ, f) {

    if(f && sliders[1].output) {
        image(enemyFrozImgs[typ], x, y, siz, siz);
    }
    else {
        image(enemyImgs[typ], x, y, siz, siz);
    }

}


/**
 * MAPS
 * The code of the two maps of the game
 **/
var mappy = [
    
    // the first map
    [
        " o             ",
        " o             ",
        " o             ",
        " o    ooooooo  ",
        " o    o     o  ", // 5
        " o    o     o  ",
        " o    o     o  ",
        " oooooo     o  ",
        "            o  ",
        "     oooooooo  ", // 10
        "     o         ",
        "     ooooooooo ",
        "             o ",
        "             o ",
        "             o ", // 15
    ],
    
    // ****GASP****
    // the second map
    [
        " o             ",
        " o    ooo      ",
        " o    o o      ",
        " oooooooo      ",
        "      o        ", // 5
        "      o        ",
        "   oooo        ",
        "   o           ",
        "   ooooooooooo ",
        "             o ", // 10
        "             o ",
        "             o ",
        "             o ",
        "             o ",
        "             o ", // 15
        
    ],

];


/**
 * TURNING POINTS
 * The turning points of the maps... probably not the most efficient method BUT it was how i did it and what are you going to do about it
 **/
// turning point x, then y, then xvel, then yvel (for directional stuff)
var turns = [

    [
        
        [
            59, 300, 1, 0
        ],
        [
            260, 299, 0, -1
        ],
        [
            259, 140, 1, 0
        ],
        [
            500, 140, 0, 1
        ],
        [
            499, 380, -1, 0
        ],
        [
            220, 379, 0, 1
        ],
        [
            219, 460, 1, 0
        ],
        [
            540, 459, 0, 1
        ],
        [
            539, 620, 0, 0
        ],
        [
            "end"
        ]
        
    ],

    [
        
        [
            59, 140, 1, 0,
        ],
        [
            340, 140, 0, -1,
        ],
        [
            340, 60, -1, 0,
        ],
        [
            261, 60, 0, 1,
        ],
        [
            260, 260, -1, 0
        ],
        [
            140, 260, 0, 1
        ],
        [
            140, 340, 1, 0
        ],
        [
            540, 340, 0, 1
        ],
        [
            540, 650, 0, 1
        ],
        [
            "end"
        ],
        
    ]

];


/**
 * ENEMY FUNCTION
 * The function... for the enemy... make a guess
 **/
function enemy(type, x, y) {

    this.t = type;
    
    this.pos = new PVector(x, y);

    this.die = false;

    // frozen time
    this.frozT = 0;

    this.rot = random(0, 360);

    // enemy types
    switch (this.t) {

        // they don't have names
        case 0:
            this.spd = 1.5;
            this.health = 35;
            this.bounty = 1;
            this.col = color(195, 160, 160);
            break;

        case 1:
            this.spd = 1.3;
            this.health = 245;
            this.bounty = 4;
            this.col = color(220, 70, 80);
            break;

        case 2:
            this.spd = 2.2;
            this.health = 65;
            this.bounty = 6;
            this.col = color(120, 225, 80);
            break;

        case 3:
            this.spd = 0.5;
            this.health = 1000;
            this.bounty = 14;
            this.col = color(120, 105, 240);
            break;

        case 4:
            this.spd = 1.4;
            this.health = 95;
            this.bounty = 8;
            this.col = color(200, 100, 200);
            break;

        case 5:
            this.spd = 0.4;
            this.health = 5400;
            this.bounty = 31;
            this.col = color(60, 195, 60);
            break;

        case 6:
            this.spd = 0.4;
            this.health = 16900;
            this.bounty = 62;
            this.col = color(190, 200, 130);
            break;

        case 7:
            this.spd = 2;
            this.health = 774;
            this.bounty = 17;
            this.col = 100;
            break;

        case 8:
            this.spd = 0.4;
            this.health = 35700;
            this.bounty = 86;
            this.col = 210;
            break;

    }
    
    // for difficulty shtuff
    switch(selMode) {
        
        case 0:
            this.health *= 0.55;
        break;
        
        case 2:
            this.health *= 1.3;
        break;
        
    }

    // the overall health, for the health bar
    this.totHealth = this.health;

    this.xV = 0 * this.spd;
    this.yV = 1 * this.spd;

    this.turnIdx = 0;

}

enemy.prototype = {
    
    draw: function() {
        
        imageMode(CENTER);
        pushMatrix();
        translate(this.pos.x, this.pos.y);
        rotate(this.rot);
    
        drawEnemy(0, 0, 57, this.t, this.frozT > 0 && sliders[1]);
        
        popMatrix();
        
        if(debug_mode) {
            
            textSize(13);
            fill(0);
            text((this.health / this.totHealth * 100).toFixed(1) + "%", this.pos.x, this.pos.y);
            
        }
        imageMode(CORNER);
    
        // health bar
        strokeWeight(1.5);
        stroke(20);
        fill(255, 0, 0);
        rect(this.pos.x - 16, this.pos.y - 25, 32, 6);
    
        noStroke();
        fill(0, 255, 0);
        rect(this.pos.x - 15, this.pos.y - 24, constrain((this.health / this.totHealth) * 30, 0, 1000), 4);
            
    },
    
    func: function() {
        
        // rotating
        if(mystats.health > 0) {
            this.rot += 1.5;
        }
    
        // regenerating enemy
        if(this.t === 4 && this.health < this.totHealth) {
            this.health += 0.25;
        }
    
        // freezing
        this.frozT -= 1;
    
        if(this.frozT > 0) {
            this.pos.x += this.xV / 2;
            this.pos.y += this.yV / 2;
        }
        else {
            this.pos.x += this.xV;
            this.pos.y += this.yV;
        }
    
        // if enemy dies
        if(this.health <= 0) {
            this.die = true;
        }
    
        // kind of locks onto the nearest square for smoothness
        if(this.xV === 0) {
            this.pos.x = (floor(this.pos.x / 40) * 40) + 20;
        }
        if(this.yV === 0) {
            this.pos.y = (floor(this.pos.y / 40) * 40) + 20;
        }
    
        // turning D:
        // kinda choppy but whatEVER
        if(this.pos.x > turns[selMap][this.turnIdx][0] - 4 && this.pos.x < turns[selMap][this.turnIdx][0] + 4 && this.pos.y > turns[selMap][this.turnIdx][1] - 4 && this.pos.y < turns[selMap][this.turnIdx][1] + 4) {
    
            this.xV = turns[selMap][this.turnIdx][2] * this.spd;
            this.yV = turns[selMap][this.turnIdx][3] * this.spd;
    
            this.turnIdx++;
    
        }
    
        // if they got past everything
        if(turns[selMap][this.turnIdx][0] === "end") {
            this.die = true;
        }
        
    },
    
};


/**
 * WAVES
 * The waves of the game... very fun
 **/
var waves = [
    
    [0, 0, 0, 0, 0, 0], // 1
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1], // 5
    [1, 1, 1, 1, 1],
    [2, 2, 2, 2, 2],
    [0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 2, 2, 2, 1, 2, 1, 2],
    [3],
    [2, 2, 1, 1, 1, 1], // 10
    [4, 4, 4, 4, 4, 4],
    [4, 3, 4, 4, 4, 4, 4, 3],
    [0, 0, 3, 0, 0, 3, 0, 1, 1, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [5], // 15
    [0, 0, 0, 3, 3, 1, 3, 1, 4, 2, 2, 2, 4, 1, 4, 1, 4, 3, 3, 3, 3, 3, 3, 3, 4, 4, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 4],
    [1, 1, 1, 2, 5, 2, 2, 2, 3, 3, 3, 1, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 2, 5, 2, 2, 2, 1, 0, 1, 1, 1, 1, 2, 1, 2, 2],
    [5, 5, 5, 5, 5],
    [5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
    [6], // 20
    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [7, 7, 7],
    [7, 7, 7, 6, 6, 3, 3, 1, 3, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 1, 1, 1, 2],
    [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],
    [3, 3, 3, 2, 1, 1, 2, 1, 2, 1, 3, 5, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], // 25
    [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],
    [8],
    [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 3, 3, 3, 4, 4, 4, 5, 6, 6, 6, 5, 7, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 1, 1, 6, 1, 2, 1, 6],
    [1, 1, 2, 1, 2, 3, 1, 1, 1, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 7, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 8, 2, 2, 2, 2, 5, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 7],
    [3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 3, 3, 3, 3, 3, 1, 1, 1, 1, 3, 1, 1, 3, 6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 7, 7, 7, 7], // 30
    [8, 8, 8, 8, 5, 5, 5, 7, 7, 7, 7, 7, 8, 8, 8, 8],
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 4, 4, 4, 4, 4, 7, 4, 4, 4, 7, 4, 8, 4, 8, 4, 7],
    [2, 3, 2, 2, 2, 2, 6, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 8, 7, 7, 7, 7, 7, 7, 3, 0, 1, 2, 4, 5, 6, 7, 8, 4, 4, 4, 4, 4, 7, 7, 7, 4, 7, 8, 8, 7, 4, 7, 4, 4, 8],
    ["done"],
    
];

/**
 * WAVE DIFFERENCES
 * The delay between the spawning of enemies in waves
 **/
var waveDiff = [
    
    400, // 1
    320,
    200,
    23,
    457, // 5
    228,
    267,
    23,
    297,
    268, // 10
    260,
    274,
    367,
    23,
    297, // 15
    382,
    560,
    800,
    23,
    297, // 20
    312,
    287,
    331,
    251,
    251, // 25
    23,
    305,
    342,
    331,
    323, // 30
    309,
    319
    
];


/**
 * WAVE NOTES
 * What it says after you finish a wave (lmk if you actually read them)
 **/
var waveNotes = [
    
    "That was nice and\neasy! What if we\nadd more of them?", // 1
    "Simple (right?)... but\nwhat if there were\ndozens of them???",
    "Nice. But what\nabout this guy?",
    "A little bit more tanky.\nLet's add in a few.",
    "Ok, nice work. No more\neasy stuff. These guys\nare nice and fast.",
    "Nice, nice, but let's mix\nit up.", // 5
    "Ok. Nothing to say. Here's\nthe first mini-boss of the\ngame... so far >:D",
    "ok nice job :)",
    "These guys regenerate.\nSo kill them quick.\n(But they don't have\nmuch health)",
    "By the way, the sentry\nis not very good.\n",
    "Snipers aren't very\ngood either.", // 10
    "Upgrading towers is\nvery useful (hint hint >:)",
    "Ok, you did well. Or\nmaybe you didn't.\nHere's another new\nenemy... the tank",
    "running out of things to\nsay... do you know\nwhy the chicken\ncrossed the road?",
    "I know you were dying\nto know... it's to get to\nthe other side (wow)",
    "Ok, a few tanks\nincoming. Clearly not\nchallenging yet.", // 15
    "Still haven't lost yet???\nFine, more tanks\nincoming.",
    "o.O another challenger\napproaches... this is a\nsupertank (pls dont\ncriticize my creative\nnaming process)",
    "Dang. I thought that\nwould work. [Or maybe\nit did.] Oh well... I hope\nyou like speed",
    "that was basically a free\ngift lol. you are\nwelcome.",
    "oh btw that was a new\nenemy", // 20
    "Nothing to say except a\nsarcastic \"nice work\"",
    "o.o",
    ":D",
    "ok new boss guy",
    "the super is by far the\nbest tower -- check out\nthe notes in the code", // 25
    "there are only 5 waves\nleft!",
    "4 left -- I believe\n:D",
    "3 are remaining",
    "2 till done",
    "LAST WAVE!!", // 30
    "You won :)",
    
];


/**
 * BULLETS
 * The function with all the bullets..........
 * go figure
 **/
function bullet(x, y, rot, dmg, f, fr) {

    this.pos = new PVector(x, y);

    this.rot = rot;

    this.dmg = dmg;

    this.from = f;

    this.die = false;

    this.frozo = fr;

}

bullet.prototype = {
    
    draw: function() {
        
        strokeWeight(1);
        stroke(0);
        fill(220, 174, 143);
        ellipse(this.pos.x, this.pos.y, 4, 4);
        
    },
    
    func: function() {
        
        // this was too much work :/
        this.pos.add(new PVector(cos(this.rot) * 6, sin(this.rot) * 6));
    
        for(var i = enemys.length - 1; i >= 0; i--) {
    
            if(circleCollide(this.pos.x, this.pos.y, 5, enemys[i].pos.x, enemys[i].pos.y, 38) && !this.die) {
                
                doSound(2);
                
                enemys[i].health -= this.dmg;
                // println(this.dmg + " " + enemys[i].health);
    
                if(this.frozo !== 0 && !this.die) {
                    enemys[i].frozT = this.frozo * 60;
                }
    
                if(towers.length >= this.from + 1 && !this.die) {
                    this.die = true;
                    towers[this.from].good++;
                    waveStats.hit++;
                    
                    hint("did you know this feature existed");
                    
                    hint("not an easter egg either");
                    
                    // this is so towers don't get credited for more damage than what takes to kill the enemy
                    if(enemys[i].health <= 0) {
                        // println(this.dmg + enemys[i].health);
                        towers[this.from].dlt += (this.dmg + enemys[i].health);
                        waveStats.dmg += (this.dmg + enemys[i].health);
                    }
                    
                    else {
                        towers[this.from].dlt += this.dmg;
                        waveStats.dmg += this.dmg;
                    }
                }
    
                this.die = true;
    
            }
        }
    
        if(this.pos.x < -5 || this.pos.x > 605 || this.pos.y < -5 || this.pos.y > 605) {
            this.die = true;
        }
        
    },
    
};

var bullets = [];


/**
 * TOWERS
 * The function that draws, and functions the towers
 **/
function tower(t, x, y) {

    this.die = false;
    
    this.pos = new PVector(x, y);

    // enemy they are targeting
    this.targ = null;

    this.typ = t;

    // reload timer
    this.relT = 0;

    this.rot = 0;

    // upgrading
    this.up = false;

    // minor delay, to prevent misclicks
    this.lifSpan = 0;

    // damage dealt
    this.dlt = 0;

    // bullets fired
    this.fired = 0;

    // bullets hit
    this.good = 0;

    // amount upgraded
    this.upgCnt = 0;

    switch (this.typ) {

        // cannon
        case 0:

            this.range = 90;
            this.reload = 30;
            this.dmg = 8;
            this.spendt = 18.75;
            this.upg = 17;
            this.frztm = 0;
            this.col = color(195, 0, 0);

        break;

            // machine gun
        case 1:

            this.range = 100;
            this.reload = 6;
            this.dmg = 4.25;
            this.spendt = 56.25;
            this.upg = 50;
            this.frztm = 0;
            this.col = color(82, 118, 73);

        break;

            // sentry
        case 2:

            this.range = 100;
            this.reload = 18;
            this.dmg = 20;
            this.spendt = 112.5;
            this.upg = 100;
            this.frztm = 0;
            this.col = color(227, 101, 124);

        break;

            // freezer
        case 3:

            this.range = 75;
            this.reload = 35;
            this.dmg = 7.5;
            this.spendt = 150;
            this.upg = 134;
            this.frztm = 2.5;
            this.col = color(75, 158, 225);

        break;

            // sniper
        case 4:

            this.range = 200;
            this.reload = 100;
            this.dmg = 100;
            this.spendt = 187.5;
            this.upg = 167;
            this.frztm = 0;
            this.col = color(226, 235, 107);

        break;

            // blaster
        case 5:

            this.range = 55;
            this.reload = 16;
            this.dmg = 94;
            this.spendt = 243.75;
            this.upg = 217;
            this.frztm = 0;
            this.col = color(136, 192, 117);

        break;

            // super
        case 6:

            this.range = 165;
            this.reload = 21;
            this.dmg = 135;
            this.spendt = 487.5;
            this.upg = 433;
            this.frztm = 0;
            this.col = color(163, 69, 222);

        break;

    }

}

tower.prototype = {
    
    draw: function() {
        
        pushMatrix();
        translate(this.pos.x, this.pos.y);
        rotate(this.rot);
        
        drawTower(-24, -24, 48, this.typ, this.upgCnt);
    
        popMatrix();
        
        if(debug_mode) {
            
            fill(0);
            textSize(10);
            text(constrain(round(this.relT / this.reload * 100), 0, 100) + "%", this.pos.x, this.pos.y);
        
            if(this.targ !== null && this.targ < enemys.length) {
                
                strokeWeight(1);
                stroke(0, 100);
                line(this.pos.x, this.pos.y, enemys[this.targ].pos.x, enemys[this.targ].pos.y);
                
            }
            
        }
        
    },
    
    func: function() {
        
        this.lifSpan++;

        for(var i = 0; i < enemys.length; i++) {
            
            // detecting an original target
            if(circleCollide(this.pos.x, this.pos.y, this.range * 2, enemys[i].pos.x, enemys[i].pos.y, 25, 25) && this.targ === null) {
                
                this.targ = i;
                
            }
            
            // so it can find the closest one
            enemyCoords[i] = [dist(this.pos.x, this.pos.y, enemys[i].pos.x, enemys[i].pos.y)];
            
            if(this.targ !== null) {
                
                if(this.relT >= this.reload && this.targ < enemys.length) {
                    
                    // this large annoyance is just to detect accuracy %
                    for(var j = 0; j < towers.length; j++) {
                        
                        if(towers[j].pos.x === this.pos.x && towers[j].pos.y === this.pos.y) {
                            
                            bullets.push(new bullet(this.pos.x, this.pos.y, atan2(enemys[this.targ].pos.y - this.pos.y, enemys[this.targ].pos.x - this.pos.x), this.dmg, j, this.frztm));
                            this.fired++;
                            
                            waveStats.att ++;
                            
                        }
                        
                    }
                    
                    this.relT = 0;
                    
                }
                
                // rotating the tower
                if(this.targ < enemys.length) {
                    
                    this.rot = atan2(enemys[this.targ].pos.y - this.pos.y, enemys[this.targ].pos.x - this.pos.x);
                    
                }
                
            }
            
            // if it went out of range
            if(this.targ !== null && this.targ < enemys.length) {
                
                if(this.range + 17.5 < dist(this.pos.x, this.pos.y, enemys[this.targ].pos.x, enemys[this.targ].pos.y)) {
                    
                    this.targ = null;
                    
                }
                
            }
            else {
                
                this.targ = null;
                
            }
            
        }
        
        this.relT ++;
        
    },
    
    hover: function() {
        
        // hovery outline thingamajig
        fill(0, 50);
        ellipse(this.pos.x, this.pos.y, this.range * 2, this.range * 2);
        
        // upgrading
        if(clicked && this.lifSpan > 10 && mystats.health > 0 && wave.waveNum !== 32) {
            
            this.up = true;
            this.lifSpan = 0;
            
        }
        
    },
    
    sell: function() {
        
        if(mystats.health > 0 && wave.waveNum !== 32) {
            doSound(1);
        }
        mystats.coins += round(this.spendt);
        
        page = "gm";
        
        for(var k = 0; k < 30; k++) {
            particles.push(new Particle(this.pos.x, this.pos.y, this.col));
        }
        
        this.die = true;
        
    },
    
    // draw particles
    part: function() {
        
        for(var k = 0; k < 30; k++) {
            
            particles.push(new Particle(this.pos.x + random(-7.5, 7.5), this.pos.y + random(-7.5, 7.5), this.col));
            
        }
        
    },

};



/**
 * BUTTONS
 * The list of like a thousand buttons
 * (there are actually 25)
 **/
var buttons = {
    
    // mode buttons
    easMod: new Button({
        
        x: 225,
        y: 405,
        w: 150,
        h: 40,
        
        show: function() {
            
            textSize(30);
            outlineText("Easy", 300, 425);
            
            if(selMode === 0) {
                fill(0, 30);
                strokeWeight(2);
                stroke(0);
                rect(225, 405, 150, 40, 15);
            }
            
        },
        
        hover: function() {
            
            textSize(31);
            outlineText("Easy", 300, 425);
            
            cursorTyp = "h";
            
        },
        
        clicky: function() {
            
            selMode = 0;
            
        },
        
    }),
    
    medMod: new Button({
        
        x: 225,
        y: 445,
        w: 150,
        h: 40,
        
        show: function() {
            
            textSize(30);
            outlineText("Medium", 300, 465);
            
            if(selMode === 1) {
                fill(0, 30);
                strokeWeight(2);
                stroke(0);
                rect(225, 445, 150, 40, 15);
            }
            
        },
        hover: function() {
            
            textSize(31);
            outlineText("Medium", 300, 465);
            
            cursorTyp = "h";
            
        },
        
        clicky: function() {
            
            selMode = 1;
            
        },
        
    }),
    
    harMod: new Button({
        
        x: 225,
        y: 485,
        w: 150,
        h: 40,
        
        show: function() {
            
            textSize(30);
            outlineText("Hard", 300, 505);
            
            if(selMode === 2) {
                fill(0, 30);
                strokeWeight(2);
                stroke(0);
                rect(225, 485, 150, 40, 15);
            }
            
        },
        hover: function() {
            
            textSize(31);
            outlineText("Hard", 300, 505);
            
            cursorTyp = "h";
            
        },
        clicky: function() {
            
            selMode = 2;
            
        },
        
    }),
    
    
    // map buttons
    map1: new Button({
        
        x: 140,
        y: 165,
        w: 120,
        h: 160,
        
        show: function() {
            
            strokeWeight(2);
            stroke(155);
            if(selMap === 0) {
                strokeWeight(3);
                stroke(200);
            }
            
            fill(185);
            rect(140, 165, 120, 160);
            
            image(imgs.map1, 150, 175, 100, 100);
            
            textSize(16);
            outlineText(bestScores[0] === 0 ? "Never played" : "Best: " + bestScores[0], 200, 300);
            
        },
        
        hover: function() {
            
            strokeWeight(3);
            stroke(145);
            if(selMap === 0) {
                strokeWeight(5);
                stroke(190);
            }
            
            fill(175);
            rect(140, 165, 120, 160);
            image(imgs.map1, 150, 175, 100, 100);
            
            textSize(17);
            outlineText(bestScores[0] === 0 ? "Never played" : "Best: " + bestScores[0], 200, 300);
            
            cursorTyp = "h";
            
        },
        
        clicky: function() {
            
            selMap = 0;
            
        },
        
    }),
    
    map2: new Button({
        
        x: 340,
        y: 165,
        w: 120,
        h: 160,
        
        show: function() {
            
            strokeWeight(2);
            stroke(155);
            if(selMap === 1) {
                strokeWeight(3);
                stroke(200);
            }
            
            fill(185);
            rect(340, 165, 120, 160);
            
            image(imgs.map2, 350, 175, 100, 100);
            
            textSize(16);
            outlineText(bestScores[1] === 0 ? "Never played" : "Best: " + bestScores[1], 400, 300);
            
        },
        
        hover: function() {
            
            strokeWeight(3);
            stroke(145);
            if(selMap === 1) {
                strokeWeight(5);
                stroke(190);
            }
            fill(175);
            
            rect(340, 165, 120, 160);
            
            image(imgs.map2, 350, 175, 100, 100);
            
            textSize(16.5);
            outlineText(bestScores[1] === 0 ? "Never played" : "Best: " + bestScores[1], 400, 300);
            
            cursorTyp = "h";
            
        },
        
        clicky: function() {
            
            selMap = 1;
            
        },
        
    }),
    
    
    // the all knowing back button o.O
    bck: new Button({
        
        x: 20,
        y: 20,
        w: 100,
        h: 55,
        
        show: function() {
            
            fill(215, 180, 180);
            stroke(200, 165, 165);
            strokeWeight(5);
            quad(20, 20, 20, 75, 110, 75, 130, 20);
            
            fill(100, 100);
            noStroke();
            triangle(45, 20 + (55 / 2), 80, 27.5, 80, 67.5);
            
        },
        
        hover: function() {
            
            fill(205, 170, 170);
            stroke(190, 155, 155);
            strokeWeight(5);
            quad(20, 20, 20, 75, 110, 75, 130, 20);
            
            fill(100, 100);
            noStroke();
            triangle(45, 20 + (55 / 2), 80, 27.5, 80, 67.5);
            
            cursorTyp = "h";
            
        },
        
        clicky: function() {
            
            if(low_lag_transition) {
                transitions.push(new transy());
            }
            else {
                trans.img = get(0, 0, 600, 600);
                trans.started = true;
                trans.fil = 255;
            }
            
            towers = [];
            enemys = [];
            
            mystats.coins = 100;
            mystats.health = 30;
            
            lAnim = [-1000, 2000, -1000, 1200, 0];
            
            wave.waveTimer = 0;
            wave.prog = 0;
            wave.waveNum = 0;
            wave.started = false;
            wave.ended = false;
            wave.doneTimer = 0;
            
            selTower = null;
            
            page = "maine";
            
        },
        
    }),
    
    // start game
    strtGm: new Button({
        
        x: 470,
        y: 425,
        w: 110,
        h: 55,
        
        show: function() {
            
            fill(215, 180, 180);
            stroke(200, 165, 165);
            strokeWeight(5);
            quad(470, 425, 470, 480, 560, 480, 580, 425);
            
            fill(100, 100);
            noStroke();
            triangle(540, 425 + (55 / 2), 505, 480 - 47.5, 505, 474);
            
        },
        
        hover: function() {
            
            fill(205, 170, 170);
            stroke(190, 155, 155);
            strokeWeight(5);
            quad(470, 425, 470, 480, 560, 480, 580, 425);
            
            fill(100, 100);
            noStroke();
            triangle(540, 425 + (55 / 2), 505, 480 - 47.5, 505, 474);
            
            cursorTyp = "h";
            
        },
        
        clicky: function() {
            
            if(low_lag_transition) {
                transitions.push(new transy());
            }
            else {
                trans.img = get(0, 0, 600, 600);
                trans.started = true;
                trans.fil = 255;
            }
                
            page = "gm";
            scoar = 0;
            
            // modes
            switch (selMode) {
                
                case 0:
                    mystats.coins = 150;
                    mystats.health = 50;
                break;
                
                case 1:
                    mystats.coins = 100;
                    mystats.health = 30;
                break;
                
                case 2:
                    mystats.coins = 75;
                    mystats.health = 20;
                break;
                
            }
            
        },
        
    }),
    
    // the play button on the menu
    play: new Button({
        
        x: 620,
        y: 290,
        w: 200,
        h: 100,
        
        show: function() {
            
            fill(215, 180, 180);
            stroke(200, 165, 165);
            strokeWeight(5);
            quad(375, 290, 400, 390, 625, 390, 625, 290);
            
            fill(100, 100);
            noStroke();
            triangle(455, 310, 455, 370, 550, 340);
            
        },
        
        hover: function() {
            
            fill(205, 170, 170);
            stroke(190, 155, 155);
            strokeWeight(5);
            quad(375, 290, 400, 390, 625, 390, 625, 290);
            
            fill(100, 100);
            noStroke();
            triangle(455, 310, 455, 370, 550, 340);
            
            cursorTyp = "h";
            
        },
        
        clicky: function() {
            
            if(low_lag_transition) {
                transitions.push(new transy());
            }
            else {
                trans.img = get(0, 0, 600, 600);
                trans.started = true;
                trans.fil = 255;
            }
            
            page = "picker";
            
        },
        
    }),
    
    // leaderboard button
    lead: new Button({
        
        x: 620,
        y: 400,
        w: 220,
        h: 100,
        
        show: function() {
            
            fill(215, 180, 180);
            stroke(200, 165, 165);
            strokeWeight(5);
            quad(402, 400, 427, 500, 625, 500, 625, 400);
            
            fill(100, 100);
            noStroke();
            rect(467.5, 450, 25, 40, 10);
            rect(497.5, 410, 25, 80, 10);
            rect(527.5, 430, 25, 60, 10);
            
        },
        
        hover: function() {
            
            fill(205, 170, 170);
            stroke(190, 155, 155);
            strokeWeight(5);
            quad(402, 400, 427, 500, 625, 500, 625, 400);
            
            fill(100, 100);
            noStroke();
            rect(467.5, 450, 25, 40, 10);
            rect(497.5, 410, 25, 80, 10);
            rect(527.5, 430, 25, 60, 10);
            
            cursorTyp = "h";
            
        },
        
        clicky: function() {
            
            if(low_lag_transition) {
                transitions.push(new transy());
            }
            else {
                trans.img = get(0, 0, 600, 600);
                trans.started = true;
                trans.fil = 255;
            }
            
            page = "lead";
            
        },
        
    }),
    
    // settings button
    sett: new Button({
        
        x: 480,
        y: 20,
        w: 100,
        h: 50,
        
        show: function() {
            
            fill(175);
            strokeWeight(4);
            stroke(100);
            rect(480, 20, 100, 50, 5);
            
            imageMode(CENTER);
            
            pushMatrix();
            translate(507 + 23, 45);
            rotate(setRot);
            
            image(imgs.settings, 0, 0, 46, 46);
            
            popMatrix();
            
            imageMode(CORNER);
            
            setRot += setRotVel;
            setRotVel *= 0.985;
            setRotVel = constrain(setRotVel, 0, 6);
            
        },
        
        hover: function() {
            
            cursorTyp = "h";
            
            setRotVel += 0.01;
            setRotVel *= 1.025;
            
        },
        
        clicky: function() {
            
            page = "settings";
            
        },
        
    }),
    
    // upgrading tower "are you sure"
    upgTowFR: new Button({
        
        x: 160,
        y: 375,
        w: 280,
        h: 40,
        
        show: function() {
            
            fill(175);
            strokeWeight(4);
            if(mystats.coins >= round(towers[towerUp].upg)) {
                stroke(100);
            }
            else {
                stroke(200, 10, 10);
            }
            
            rect(160, 375, 280, 40, 5);
            
            textSize(22);
            if(mystats.coins >= round(towers[towerUp].upg)) {
                outlineText("I'm sure!", 300, 395);
            }
            else {
                outlineText("Uh oh! Can't afford.", 300, 395);
            }
            
        },
        
        hover: function() {
            
            fill(165);
            strokeWeight(4);
            if(mystats.coins >= round(towers[towerUp].upg)) {
                stroke(90);
            }
            else {
                stroke(190, 0, 0);
            }
            
            rect(160, 375, 280, 40, 5);
            
            textSize(22);
            if(mystats.coins >= round(towers[towerUp].upg)) {
                outlineText("I'm sure!", 300, 395);
                cursorTyp = "h";
            }
            else {
                outlineText("Uh oh! Can't afford.", 300, 395);
                cursorTyp = "l";
            }
            
        },
        
        clicky: function() {
            
            if(mystats.coins >= round(towers[towerUp].upg)) {
                
                mystats.coins -= round(towers[towerUp].upg);
                
                pricD.push(new pricDrop(80, 525, round(towers[towerUp].upg)));
                
                doSound(0);
                
                page = "gm";
                
                towers[towerUp].reload /= 1.3;
                towers[towerUp].range *= 1.3;
                towers[towerUp].dmg *= 1.3;
                towers[towerUp].frztm *= 1.3;
                
                towers[towerUp].spendt += (towers[towerUp].upg * 0.75);
                towers[towerUp].upg *= 1.25;
                
                towers[towerUp].upgCnt++;
                
            }
            
        },
        
    }),
    
    // upgrade tower
    upgTow: new Button({
        
        x: 304,
        y: 407,
        w: 130,
        h: 40,
        
        show: function() {
            
            fill(175);
            strokeWeight(4);
            stroke(100);
            rect(304, 407, 136, 40, 5);
            
            textSize(19);
            outlineText("Upgrade tower", 304 + (136 / 2), 427);
            
        },
        
        hover: function() {
            
            fill(165);
            strokeWeight(4);
            stroke(90);
            rect(304, 407, 136, 40, 5);
            
            textSize(19);
            outlineText("Upgrade tower", 304 + (136 / 2), 427);
            
            cursorTyp = "h";
            
        },
        
        clicky: function() {
            
            // resets all the animation transition thingies
            pageTrans.setX = 100;
                        pageTrans.setXT = 0;
                        pageTrans.setXB = 100;
                        pageTrans.setXBT = 0;
                        pageTrans.setBck = 100;
                        pageTrans.setBckStrk = 0.01;
                        pageTrans.setBckFill = 0;
            pageTrans.towS = 100;
            pageTrans.towST = 0;
            pageTrans.towXB = 125;
            pageTrans.towXBT = 0;
            pageTrans.accMTX = 425;
            pageTrans.accMTT = 0;
            pageTrans.accMTBar = 0;
            
            page = "upgt";
            
        },
        
    }),
    
    // sell tower "are you sure"
    selTowFR: new Button({
        
        x: 160,
        y: 375,
        w: 280,
        h: 40,
        
        show: function() {
            
            fill(175);
            strokeWeight(4);
            stroke(100);
            rect(160, 375, 280, 40, 5);
            
            textSize(23);
            outlineText("I'm sure!", 300, 395);
            
        },
        
        hover: function() {
            
            fill(165);
            strokeWeight(4);
            stroke(90);
            rect(160, 375, 280, 40, 5);
            
            textSize(23);
            outlineText("I'm sure!", 300, 395);
            
            cursorTyp = "h";
            
        },
        
        clicky: function() {
            
            towers[towerUp].sell();
            
        },
        
    }),
    
    // sell tower button
    sellTow: new Button({
        
        x: 160,
        y: 407,
        w: 136,
        h: 40,
        
        show: function() {
            
            fill(175);
            strokeWeight(4);
            stroke(100);
            rect(160, 407, 136, 40, 5);
            
            textSize(23);
            outlineText("Sell tower", 160 + (136 / 2), 427);
            
        },
        
        hover: function() {
            
            fill(165);
            strokeWeight(4);
            stroke(90);
            rect(160, 407, 136, 40, 5);
            
            textSize(23);
            outlineText("Sell tower", 160 + (136 / 2), 427);
            
            cursorTyp = "h";
            
        },
        
        clicky: function() {
            
            // just resets all the animations
            pageTrans.setX = 100;
                        pageTrans.setXT = 0;
                        pageTrans.setXB = 100;
                        pageTrans.setXBT = 0;
                        pageTrans.setBck = 100;
                        pageTrans.setBckStrk = 0.01;
                        pageTrans.setBckFill = 0;
            pageTrans.towS = 100;
            pageTrans.towST = 0;
            pageTrans.towXB = 125;
            pageTrans.towXBT = 0;
            pageTrans.accMTX = 425;
            pageTrans.accMTT = 0;
            pageTrans.accMTBar = 0;
            
            page = "st";
            
        },
        
    }),
    
    // x button
    extSta: new Button({
        
        x: 400,
        y: 149,
        w: 40,
        h: 40,
        
        show: function() {
            
            fill(200);
            strokeWeight(4);
            stroke(100);
            rect(400, 149, 40, 40, 5);
            
            fill(0);
            textSize(30);
            textFont(createFont("SP Custom Bold"));
            textAlign(CENTER, CENTER);
            text("X", 420, 169);
            
        },
        
        hover: function() {
            
            fill(190);
            strokeWeight(4);
            stroke(90);
            rect(400, 149, 40, 40, 5);
            
            fill(0);
            textSize(30);
            textFont(createFont("SP Custom Bold"));
            textAlign(CENTER, CENTER);
            text("X", 420, 169);
            
            cursorTyp = "h";
            
        },
        
        clicky: function() {
            
            // removes all the transitions
            pageTrans.setX = 100;
                        pageTrans.setXT = 0;
                        pageTrans.setXB = 100;
                        pageTrans.setXBT = 0;
                        pageTrans.setBck = 100;
                        pageTrans.setBckStrk = 0.01;
                        pageTrans.setBckFill = 0;
            pageTrans.towS = 100;
            pageTrans.towST = 0;
            pageTrans.towXB = 125;
            pageTrans.towXBT = 0;
            pageTrans.accMTX = 425;
            pageTrans.accMTT = 0;
            pageTrans.accMTBar = 0;
            
            selTower = null;
            
            page = "gm";
            
        },
        
    }),
    
    // another x button :D
    extPop: new Button({
        
        x: 400,
        y: 149,
        w: 40,
        h: 40,
        
        show: function() {
            
            fill(200);
            strokeWeight(4);
            stroke(100);
            rect(400, 149, 40, 40, 5);
            
            fill(0);
            textSize(30);
            textFont(createFont("SP Custom Bold"));
            textAlign(CENTER, CENTER);
            text("X", 420, 169);
            
        },
        hover: function() {
            
            fill(190);
            strokeWeight(4);
            stroke(90);
            rect(400, 149, 40, 40, 5);
            
            fill(0);
            textSize(30);
            textFont(createFont("SP Custom Bold"));
            textAlign(CENTER, CENTER);
            text("X", 420, 169);
            
            cursorTyp = "h";
            
        },
        
        clicky: function() {
            
            mystats.coins += floor((wave.waveNum + 1) * 4.73210987654321);

            wave.waveNum++;
            wave.prog = 0;
            wave.waveTimer = 0;
            wave.ended = false;
            wave.doneTimer = 0;
            
            waveStats.att = 0;
            waveStats.hit = 0;
            waveStats.coins = 0;
            waveStats.dmg = 0;
            
            pageTrans.setX = 100;
            pageTrans.setXT = 0;
            pageTrans.setXB = 100;
            pageTrans.setXBT = 0;
            pageTrans.setBck = 100;
            pageTrans.setBckStrk = 0.01;
            pageTrans.setBckFill = 0;
            pageTrans.towS = 100;
            pageTrans.towST = 0;
            pageTrans.towXB = 125;
            pageTrans.towXBT = 0;
            pageTrans.accMTX = 425;
            pageTrans.accMTT = 0;
            pageTrans.accMTBar = 0;
            
            page = "gm";
            
            scorTim = 0;
            scorIdx = 0;
            
        },
        
    }),
    
    // just one more
    extSet: new Button({
        
        x: 400,
        y: 149,
        w: 40,
        h: 40,
        
        show: function() {
            
            fill(200);
            strokeWeight(4);
            stroke(100);
            rect(400, 149, 40, 40, 5);
            
            fill(0);
            textSize(30);
            textFont(createFont("SP Custom Bold"));
            textAlign(CENTER, CENTER);
            text("X", 420, 169);
            
        },
        hover: function() {
            
            fill(190);
            strokeWeight(4);
            stroke(90);
            rect(400, 149, 40, 40, 5);
            
            fill(0);
            textSize(30);
            textFont(createFont("SP Custom Bold"));
            textAlign(CENTER, CENTER);
            text("X", 420, 169);
            
            cursorTyp = "h";
            
        },
        
        clicky: function() {
            
            pageTrans.setX = 100;
            pageTrans.setXT = 0;
            pageTrans.setXB = 100;
            pageTrans.setXBT = 0;
            pageTrans.setBck = 100;
            pageTrans.setBckStrk = 0.01;
            pageTrans.setBckFill = 0;
            pageTrans.towS = 100;
            pageTrans.towST = 0;
            pageTrans.towXB = 125;
            pageTrans.towXBT = 0;
            pageTrans.accMTX = 425;
            pageTrans.accMTT = 0;
            pageTrans.accMTBar = 0;
            
            if(!sliders[0].output) {
                particles = [];
            }
            
            
            page = "gm";
            
            scorTim = 0;
            scorIdx = 0;
            
        },
        
    }),
    
    // next wave button
    nextWav: new Button({
        
        x: 15,
        y: 420,
        w: 130,
        h: 60,
        
        show: function() {
            
            textAlign(CENTER, CENTER);
            
            fill(200);
            strokeWeight(4);
            stroke(100);
            rect(15, 420, 130, 60, 10);
            
            fill(0);
            textSize(21);
            outlineText("Next Wave", 15 + 65, 450);
            
        },
        
        hover: function() {
            
            fill(190);
            strokeWeight(4);
            stroke(90);
            rect(15, 420, 130, 60, 10);
            
            fill(0);
            textSize(21.5);
            outlineText("Next Wave", 15 + 65, 450);
            
            if(wave.waveNum === 32 || mystats.lives === 0) {
                cursorTyp = "l";
            }
            else {
                cursorTyp = "h";
            }
            
        },
        clicky: function() {
            
            if(wave.waveNum !== 32 || mystats.lives === 0) {
                
                wave.started = true;
                
            }
            
        },
        
    }),
    
    // tower buttons
    // cannon
    tower1: new Button({
        
        x: 10,
        y: 0,
        w: 70,
        h: 70,
        
        show: function() {
            
            fill(200);
            strokeWeight(4);
            if(selTower === 0) {
                stroke(235);
            }
            else if(mystats.coins >= towerPric[0]) {
                stroke(100);
            }
            else {
                stroke(200, 10, 10);
            }
            
            rect(10, shopY + 15, 70, 70, 10);
            
            drawTower(11.5, shopY + 15, 60, 0);
            
            textFont(createFont("segoe ui light"));
            textSize(15);
            fill(15);
            text("Cannon", 45, shopY + 75);
            
            textFont(createFont("monospace"));
            textSize(17);
            outlineText("$" + towerPric[0], 45, shopY + 92);
            
            this.pos.y = shopY + 15;
        },
        hover: function() {
            
            if(mystats.coins >= towerPric[0]) {
                
                cursorTyp = "h";
                
                hovTexs.push(new hovTex("Low damage, Slow reload, Small range"));
                
            }
            
            else {
                cursorTyp = "l";
            }
            
        },
        
        clicky: function() {
            
            if(selTower !== 0 && mystats.coins >= towerPric[0]) {
                selTower = 0;
            }
            else {
                
                selTower = null;
                
            }
            
        },
        
    }),
    
    // machine gun
    tower2: new Button({
        
        x: 95,
        y: 0,
        w: 70,
        h: 70,
        
        show: function() {
            
            fill(200);
            strokeWeight(4);
            if(selTower === 1) {
                stroke(235);
            }
            else if(mystats.coins >= towerPric[1]) {
                stroke(100);
            }
            else {
                stroke(200, 10, 10);
            }
            rect(95, shopY + 15, 70, 70, 10);
            
            drawTower(96.5, shopY + 15, 60, 1);
            
            textFont(createFont("Segoe UI Light"));
            textSize(11);
            fill(15);
            text("Machine Gun", 130, shopY + 75);
            
            textFont(createFont("monospace"));
            textSize(17);
            outlineText("$" + towerPric[1], 130, shopY + 92);
            
            this.pos.y = shopY + 15;
            
        },
        
        hover: function() {
            
            if(mystats.coins >= towerPric[1]) {
                cursorTyp = "h";
                hovTexs.push(new hovTex("Very low damage, Fast reload"));
            }
            
            else {
                cursorTyp = "l";
            }
            
        },
        
        clicky: function() {
            
            if(selTower !== 1 && mystats.coins >= towerPric[1]) {
                selTower = 1;
            }
            else {
                selTower = null;
            }
            
        },
        
    }),
    
    // sentry
    tower3: new Button({
        
        x: 180,
        y: 0,
        w: 70,
        h: 70,
        
        show: function() {
            
            fill(200);
            strokeWeight(4);
            if(selTower === 2) {
                stroke(235);
            }
            else if(mystats.coins >= towerPric[2]) {
                stroke(100);
            }
            else {
                stroke(200, 10, 10);
            }
            rect(180, shopY + 15, 70, 70, 10);
            
            drawTower(181.5, shopY + 15, 60, 2);
            
            textFont(createFont("Segoe UI Light"));
            textSize(15);
            fill(15);
            text("Sentry", 215, shopY + 75);
            
            textFont(createFont("monospace"));
            textSize(17);
            outlineText("$" + towerPric[2], 215, shopY + 92);
            
            this.pos.y = shopY + 15;
            
        },
        
        hover: function() {
            
            if(mystats.coins >= towerPric[2]) {
                cursorTyp = "h";
                hovTexs.push(new hovTex("Low-ish damage, Good reload, Medium range"));
            }
            else {
                cursorTyp = "l";
            }
            
        },
        
        clicky: function() {
            
            if(selTower !== 2 && mystats.coins >= towerPric[2]) {
                selTower = 2;
            }
            else {
                selTower = null;
            }
            
        },
        
    }),
    
    // freezer
    tower4: new Button({
        
        x: 265,
        y: 0,
        w: 70,
        h: 70,
        
        show: function() {
            
            fill(200);
            strokeWeight(4);
            if(selTower === 3) {
                stroke(235);
            }
            else if(mystats.coins >= towerPric[3]) {
                stroke(100);
            }
            else {
                stroke(200, 10, 10);
            }
            rect(265, shopY + 15, 70, 70, 10);
            
            drawTower(266.5, shopY + 15, 60, 3);
            
            textFont(createFont("Segoe UI Light"));
            textSize(15);
            fill(15);
            text("Freezer", 300, shopY + 75);
            
            textFont(createFont("monospace"));
            textSize(17);
            outlineText("$" + towerPric[3], 300, shopY + 92);
            
            this.pos.y = shopY + 15;
            
        },
        
        hover: function() {
            
            if(mystats.coins >= towerPric[3]) {
                cursorTyp = "h";
                hovTexs.push(new hovTex("Tiny damage, Slow reload, Freezes enemies"));
            }
            else {
                cursorTyp = "l";
            }
            
        },
        
        clicky: function() {
            
            if(selTower !== 3 && mystats.coins >= towerPric[3]) {
                selTower = 3;
            }
            else {
                selTower = null;
            }
            
        },
        
    }),
    
    // sniper
    tower5: new Button({
        
        x: 350,
        y: 0,
        w: 70,
        h: 70,
        show: function() {
            
            fill(200);
            strokeWeight(4);
            if(selTower === 4) {
                stroke(235);
            }
            else if(mystats.coins >= towerPric[4]) {
                stroke(100);
            }
            else {
                stroke(200, 10, 10);
            }
            rect(180 + 85 + 85, shopY + 15, 70, 70, 10);
            
            drawTower(351.5, shopY + 15, 60, 4);
            
            textFont(createFont("Segoe UI Light"));
            textSize(15);
            fill(15);
            text("Sniper", 385, shopY + 75);
            
            textFont(createFont("monospace"));
            textSize(17);
            outlineText("$" + towerPric[4], 385, shopY + 92);
            
            this.pos.y = shopY + 15;
            
        },
        
        hover: function() {
            
            if(mystats.coins >= towerPric[4]) {
                cursorTyp = "h";
                hovTexs.push(new hovTex("High damage, Very slow reload"));
            }
            else {
                cursorTyp = "l";
            }
            
        },
        
        clicky: function() {
            
            if(selTower !== 4 && mystats.coins >= towerPric[4]) {
                selTower = 4;
            }
            else {
                selTower = null;
            }
            
        },
        
    }),
    
    // blaster
    tower6: new Button({
        
        x: 435,
        y: 0,
        w: 70,
        h: 70,
        
        show: function() {
            
            fill(200);
            strokeWeight(4);
            if(selTower === 5) {
                stroke(235);
            }
            else if(mystats.coins >= towerPric[5]) {
                stroke(100);
            }
            else {
                stroke(200, 10, 10);
            }
            rect(435, shopY + 15, 70, 70, 10);
            
            drawTower(436.5, shopY + 15, 60, 5);
            
            textFont(createFont("Segoe UI Light"));
            textSize(15);
            fill(15);
            text("Blaster", 470, shopY + 75);
            
            textFont(createFont("monospace"));
            textSize(17);
            outlineText("$" + towerPric[5], 470, shopY + 92);
            
            this.pos.y = shopY + 15;
            
        },
        
        hover: function() {
            
            if(mystats.coins >= towerPric[5]) {
                cursorTyp = "h";
                hovTexs.push(new hovTex("High damage, Good reload, Tiny range"));
            }
            else {
                cursorTyp = "l";
            }
            
        },
        
        clicky: function() {
            
            if(selTower !== 5 && mystats.coins >= towerPric[5]) {
                selTower = 5;
            }
            else {
                selTower = null;
            }
            
        },
        
    }),
    
    // super
    tower7: new Button({
        
        x: 520,
        y: 0,
        w: 70,
        h: 70,
        
        show: function() {
            
            fill(200);
            strokeWeight(4);
            if(selTower === 6) {
                stroke(235);
            }
            else if(mystats.coins >= towerPric[6]) {
                stroke(100);
            }
            else {
                stroke(200, 10, 10);
            }
            rect(520, shopY + 15, 70, 70, 10);
            
            drawTower(521.5, shopY + 15, 60, 6);
            
            textFont(createFont("Segoe UI Light"));
            textSize(15);
            fill(15);
            text("Super", 555, shopY + 75);
            
            textFont(createFont("monospace"));
            textSize(17);
            outlineText("$" + towerPric[6], 555, shopY + 92);
            
            this.pos.y = shopY + 15;
            
        },
        hover: function() {
            
            if(mystats.coins >= towerPric[6]) {
                cursorTyp = "h";
                hovTexs.push(new hovTex("High damage, Fast reload, Large range"));
            }
            else {
                cursorTyp = "l";
            }
            
        },
        
        clicky: function() {
            
            if(selTower !== 6 && mystats.coins >= towerPric[6]) {
                selTower = 6;
            }
            else {
                selTower = null;
            }
            
        },
        
    }),
    
    // finally that is done
};


// draw function
function draw() {
    textFont(createFont("Arial"));
    
    try {
        
        switch (page) {
            
            case "load":
                
                background(0, 0);
                noStroke();
                
                switch (loadAmt) {
                    
                    case 1:
                        
                        for(var i = 0; i < 20; i++) {
                            for(var j = 0; j < 20; j++) {
                                fill(random(55, 75) - (2 * j) - (2 * i), random(219, 239) - (2 * j) - (2 * i), random(132, 152) - (2 * j) - (2 * i));
                                rect(i * 30, j * 30, 30, 30);
                            }
                        }
                        
                        filter(BLUR, 11);
                        
                        imgs.backgrd1 = get(0, 0, 600, 600);
                        
                    break;
                    
                    
                    case 2:
                        
                        fill(0);
                        rect(275, 250, 320, 120, 30);
                        
                        fill(245, 5, 5);
                        strokeWeight(55);
                        stroke(195, 0, 0);
                        beginShape();
                        for(var i = 0; i < 5; i++) {
                            vertex(sin(i * 360 / 5 + 85) * 180 + 300, cos(i * 360 / 5 + 85) * 180 + 285);
                        }
                        endShape(CLOSE);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 3:
                        
                        fill(0);
                        rect(275, 250, 320, 120, 30);
                        
                        fill(245, 5, 5);
                        strokeWeight(55);
                        stroke(195, 0, 0);
                        beginShape();
                        for(var i = 0; i < 5; i++) {
                            vertex(sin(i * 360 / 5 + 85) * 180 + 300, cos(i * 360 / 5 + 85) * 180 + 285);
                        }
                        endShape(CLOSE);
                        
                        beginShape();
                        stroke(210, 2, 2);
                        for(var i = 0; i < 5; i++) {
                            vertex(sin(i * 360 / 5 + 85) * 120 + 300, cos(i * 360 / 5 + 85) * 120 + 285);
                        }
                        endShape(CLOSE);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 4:
                        
                        fill(0);
                        rect(275, 250, 320, 120, 30);
                        
                        fill(245, 5, 5);
                        strokeWeight(55);
                        stroke(195, 0, 0);
                        beginShape();
                        for(var i = 0; i < 5; i++) {
                            vertex(sin(i * 360 / 5 + 85) * 180 + 300, cos(i * 360 / 5 + 85) * 180 + 285);
                        }
                        endShape(CLOSE);
                        
                        beginShape();
                        stroke(210, 2, 2);
                        for(var i = 0; i < 5; i++) {
                            vertex(sin(i * 360 / 5 + 85) * 120 + 300, cos(i * 360 / 5 + 85) * 120 + 285);
                        }
                        endShape(CLOSE);
                        
                        beginShape();
                        stroke(230, 3, 3);
                        for(var i = 0; i < 5; i++) {
                            vertex(sin(i * 360 / 5 + 85) * 60 + 300, cos(i * 360 / 5 + 85) * 60 + 285);
                        }
                        endShape(CLOSE);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 5:
                        
                        fill(0);
                        quad(275, 295, 275 + 320, 250, 275 + 320, 370, 275, 325);
                        fill(255, 60);
                        noStroke();
                        rect(520, 265, 60, 20, Infinity);
                        
                        fill(245, 5, 5);
                        strokeWeight(55);
                        stroke(195, 0, 0);
                        beginShape();
                        for(var i = 0; i < 5; i++) {
                            vertex(sin(i * 360 / 5 + 85) * 180 + 300, cos(i * 360 / 5 + 85) * 180 + 285);
                        }
                        endShape(CLOSE);
                        
                        beginShape();
                        stroke(210, 2, 2);
                        for(var i = 0; i < 5; i++) {
                            vertex(sin(i * 360 / 5 + 85) * 120 + 300, cos(i * 360 / 5 + 85) * 120 + 285);
                        }
                        endShape(CLOSE);
                        
                        beginShape();
                        stroke(230, 3, 3);
                        for(var i = 0; i < 5; i++) {
                            vertex(sin(i * 360 / 5 + 85) * 60 + 300, cos(i * 360 / 5 + 85) * 60 + 285);
                        }
                        endShape(CLOSE);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 6:
                        
                        fill(0);
                        rect(275, 250, 320, 120, 30);
                        
                        fill(102, 138, 93);
                        strokeWeight(55);
                        stroke(82, 118, 73);
                        beginShape();
                        for(var i = 0; i < 6; i++) {
                            vertex(sin(i * 360 / 6 + 84) * 180 + 300, cos(i * 360 / 6 + 84) * 180 + 285);
                        }
                        endShape(CLOSE);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 7:
                        
                        fill(0);
                        rect(275, 250, 320, 120, 30);
                        
                        fill(102, 138, 93);
                        strokeWeight(55);
                        stroke(82, 118, 73);
                        beginShape();
                        for(var i = 0; i < 6; i++) {
                            vertex(sin(i * 360 / 6 + 84) * 180 + 300, cos(i * 360 / 6 + 84) * 180 + 285);
                        }
                        endShape(CLOSE);
                        
                        stroke(88, 124, 79);
                        beginShape();
                        for(var i = 0; i < 6; i++) {
                            vertex(sin(i * 360 / 6 + 84) * 120 + 300, cos(i * 360 / 6 + 84) * 120 + 285);
                        }
                        endShape(CLOSE);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 8:
                        
                        fill(0);
                        rect(275, 250, 320, 120, 30);
                        
                        fill(102, 138, 93);
                        strokeWeight(55);
                        stroke(82, 118, 73);
                        beginShape();
                        for(var i = 0; i < 6; i++) {
                            vertex(sin(i * 360 / 6 + 84) * 180 + 300, cos(i * 360 / 6 + 84) * 180 + 285);
                        }
                        endShape(CLOSE);
                        
                        stroke(88, 124, 79);
                        beginShape();
                        for(var i = 0; i < 6; i++) {
                            vertex(sin(i * 360 / 6 + 84) * 120 + 300, cos(i * 360 / 6 + 84) * 120 + 285);
                        }
                        endShape(CLOSE);
                        
                        stroke(94, 130, 85);
                        beginShape();
                        for(var i = 0; i < 6; i++) {
                            vertex(sin(i * 360 / 6 + 84) * 60 + 300, cos(i * 360 / 6 + 84) * 60 + 285);
                        }
                        endShape(CLOSE);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 9:
                        
                        fill(0);
                        quad(275, 285, 275 + 320, 250, 275 + 320, 370, 275, 335);
                        
                        fill(255, 60);
                        noStroke();
                        rect(520, 265, 60, 20, Infinity);
                        
                        fill(102, 138, 93);
                        strokeWeight(55);
                        stroke(82, 118, 73);
                        beginShape();
                        for(var i = 0; i < 6; i++) {
                            vertex(sin(i * 360 / 6 + 84) * 180 + 300, cos(i * 360 / 6 + 84) * 180 + 285);
                        }
                        endShape(CLOSE);
                        
                        stroke(88, 124, 79);
                        beginShape();
                        for(var i = 0; i < 6; i++) {
                            vertex(sin(i * 360 / 6 + 84) * 120 + 300, cos(i * 360 / 6 + 84) * 120 + 285);
                        }
                        endShape(CLOSE);
                        
                        stroke(94, 130, 85);
                        beginShape();
                        for(var i = 0; i < 6; i++) {
                            vertex(sin(i * 360 / 6 + 84) * 60 + 300, cos(i * 360 / 6 + 84) * 60 + 285);
                        }
                        endShape(CLOSE);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 10:
                        
                        fill(0);
                        rect(275, 250, 320, 120, 30);
                        
                        fill(247, 121, 144);
                        strokeWeight(55);
                        stroke(227, 101, 124);
                        beginShape();
                        for(var i = 0; i < 7; i++) {
                            vertex(sin(i * 360 / 7 + 84) * 180 + 300, cos(i * 360 / 7 + 84) * 180 + 285);
                        }
                        endShape(CLOSE);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 11:
                        
                        fill(0);
                        rect(275, 250, 320, 120, 30);
                        
                        fill(247, 121, 144);
                        strokeWeight(55);
                        stroke(227, 101, 124);
                        beginShape();
                        for(var i = 0; i < 7; i++) {
                            vertex(sin(i * 360 / 7 + 84) * 180 + 300, cos(i * 360 / 7 + 84) * 180 + 285);
                        }
                        endShape(CLOSE);
                        
                        stroke(233, 107, 130);
                        beginShape();
                        for(var i = 0; i < 7; i++) {
                            vertex(sin(i * 360 / 7 + 84) * 120 + 300, cos(i * 360 / 7 + 84) * 120 + 285);
                        }
                        endShape(CLOSE);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 12:
                        
                        fill(0);
                        rect(275, 250, 320, 120, 30);
                        
                        fill(247, 121, 144);
                        strokeWeight(55);
                        stroke(227, 101, 124);
                        beginShape();
                        for(var i = 0; i < 7; i++) {
                            vertex(sin(i * 360 / 7 + 84) * 180 + 300, cos(i * 360 / 7 + 84) * 180 + 285);
                        }
                        endShape(CLOSE);
                        
                        stroke(233, 107, 130);
                        beginShape();
                        for(var i = 0; i < 7; i++) {
                            vertex(sin(i * 360 / 7 + 84) * 120 + 300, cos(i * 360 / 7 + 84) * 120 + 285);
                        }
                        endShape(CLOSE);
                        
                        stroke(239, 113, 136);
                        beginShape();
                        for(var i = 0; i < 7; i++) {
                            vertex(sin(i * 360 / 7 + 84) * 60 + 300, cos(i * 360 / 7 + 84) * 60 + 285);
                        }
                        endShape(CLOSE);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 13:
                        
                        fill(0);
                        quad(275, 285, 275 + 320, 250, 275 + 320, 370, 275, 335);
                        
                        fill(255, 60);
                        noStroke();
                        rect(520, 265, 60, 20, Infinity);
                        
                        fill(247, 121, 144);
                        strokeWeight(55);
                        stroke(227, 101, 124);
                        beginShape();
                        for(var i = 0; i < 7; i++) {
                            vertex(sin(i * 360 / 7 + 84) * 180 + 300, cos(i * 360 / 7 + 84) * 180 + 285);
                        }
                        endShape(CLOSE);
                        
                        stroke(233, 107, 130);
                        beginShape();
                        for(var i = 0; i < 7; i++) {
                            vertex(sin(i * 360 / 7 + 84) * 120 + 300, cos(i * 360 / 7 + 84) * 120 + 285);
                        }
                        endShape(CLOSE);
                        
                        stroke(239, 113, 136);
                        beginShape();
                        for(var i = 0; i < 7; i++) {
                            vertex(sin(i * 360 / 7 + 84) * 60 + 300, cos(i * 360 / 7 + 84) * 60 + 285);
                        }
                        endShape(CLOSE);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 14:
                        
                        fill(0);
                        rect(275, 250, 320, 120, 30);
                        
                        strokeWeight(56);
                        stroke(75, 158, 225);
                        fill(95, 178, 245);
                        ellipse(300, 300, 350, 350);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 15:
                        
                        fill(0);
                        rect(275, 250, 320, 120, 30);
                        
                        strokeWeight(56);
                        fill(95, 178, 245);
                        stroke(75, 158, 225);
                        ellipse(300, 300, 350, 350);
                        stroke(81, 164, 231);
                        ellipse(300, 300, 270, 270);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 16:
                        
                        fill(0);
                        rect(275, 250, 320, 120, 30);
                        
                        strokeWeight(56);
                        fill(95, 178, 245);
                        stroke(75, 158, 225);
                        ellipse(300, 300, 350, 350);
                        stroke(81, 164, 231);
                        ellipse(300, 300, 270, 270);
                        stroke(87, 170, 237);
                        ellipse(300, 300, 190, 190);

                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 17:
                        
                        fill(0);
                        quad(275, 285, 275 + 320, 250, 275 + 320, 370, 275, 335);
                        fill(255, 60);
                        noStroke();
                        rect(520, 265, 60, 20, Infinity);
                        
                        strokeWeight(56);
                        fill(95, 178, 245);
                        stroke(75, 158, 225);
                        ellipse(300, 300, 350, 350);
                        stroke(81, 164, 231);
                        ellipse(300, 300, 270, 270);
                        stroke(87, 170, 237);
                        ellipse(300, 300, 190, 190);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 18:
                        
                        fill(0);
                        rect(275, 250, 320, 120, 30);
                        
                        fill(246, 255, 127);
                        strokeWeight(56);
                        stroke(226, 235, 107);
                        beginShape();
                        for(var i = 0; i < 8; i++) {
                            vertex(sin(i * 360 / 8 + 84) * 180 + 300, cos(i * 360 / 8 + 84) * 180 + 285);
                        }
                        endShape(CLOSE);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 19:
                        
                        fill(0);
                        rect(275, 250, 320, 120, 30);
                        
                        fill(246, 255, 127);
                        strokeWeight(56);
                        stroke(226, 235, 107);
                        beginShape();
                        for(var i = 0; i < 8; i++) {
                            vertex(sin(i * 360 / 8 + 84) * 180 + 300, cos(i * 360 / 8 + 84) * 180 + 285);
                        }
                        endShape(CLOSE);
                        
                        stroke(232, 241, 113);
                        beginShape();
                        for(var i = 0; i < 8; i++) {
                            vertex(sin(i * 360 / 8 + 84) * 120 + 300, cos(i * 360 / 8 + 84) * 120 + 285);
                        }
                        endShape(CLOSE);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 20:
                        
                        fill(0);
                        rect(275, 250, 320, 120, 30);
                        
                        fill(246, 255, 127);
                        strokeWeight(56);
                        stroke(226, 235, 107);
                        beginShape();
                        for(var i = 0; i < 8; i++) {
                            vertex(sin(i * 360 / 8 + 84) * 180 + 300, cos(i * 360 / 8 + 84) * 180 + 285);
                        }
                        endShape(CLOSE);
                        
                        stroke(232, 241, 113);
                        beginShape();
                        for(var i = 0; i < 8; i++) {
                            vertex(sin(i * 360 / 8 + 84) * 120 + 300, cos(i * 360 / 8 + 84) * 120 + 285);
                        }
                        endShape(CLOSE);
                        
                        stroke(238, 247, 119);
                        beginShape();
                        for(var i = 0; i < 8; i++) {
                            vertex(sin(i * 360 / 8 + 84) * 60 + 300, cos(i * 360 / 8 + 84) * 60 + 285);
                        }
                        endShape(CLOSE);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 21:
                        
                        fill(0);
                        quad(275, 285, 275 + 320, 250, 275 + 320, 370, 275, 335);
                        
                        fill(255, 60);
                        noStroke();
                        rect(520, 265, 60, 20, Infinity);
                        
                        fill(246, 255, 127);
                        strokeWeight(56);
                        stroke(226, 235, 107);
                        beginShape();
                        for(var i = 0; i < 8; i++) {
                            vertex(sin(i * 360 / 8 + 84) * 180 + 300, cos(i * 360 / 8 + 84) * 180 + 285);
                        }
                        endShape(CLOSE);
                        
                        stroke(232, 241, 113);
                        beginShape();
                        for(var i = 0; i < 8; i++) {
                            vertex(sin(i * 360 / 8 + 84) * 120 + 300, cos(i * 360 / 8 + 84) * 120 + 285);
                        }
                        endShape(CLOSE);
                        
                        stroke(238, 247, 119);
                        beginShape();
                        for(var i = 0; i < 8; i++) {
                            vertex(sin(i * 360 / 8 + 84) * 60 + 300, cos(i * 360 / 8 + 84) * 60 + 285);
                        }
                        endShape(CLOSE);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 22:
                        
                        fill(0);
                        rect(275, 250, 320, 120, 30);
                        
                        fill(156, 212, 137);
                        strokeWeight(55);
                        stroke(136, 192, 117);
                        beginShape();
                        for(var i = 0; i < 9; i++) {
                            vertex(sin(i * 360 / 9 + 84) * 180 + 300, cos(i * 360 / 9 + 84) * 180 + 285);
                        }
                        endShape(CLOSE);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 23:
                        
                        fill(0);
                        rect(275, 250, 320, 120, 30);
                        
                        fill(156, 212, 137);
                        strokeWeight(57);
                        stroke(136, 192, 117);
                        beginShape();
                        for(var i = 0; i < 9; i++) {
                            vertex(sin(i * 360 / 9 + 84) * 180 + 300, cos(i * 360 / 9 + 84) * 180 + 285);
                        }
                        endShape(CLOSE);
                        
                        stroke(142, 198, 123);
                        beginShape();
                        for(var i = 0; i < 9; i++) {
                            vertex(sin(i * 360 / 9 + 84) * 120 + 300, cos(i * 360 / 9 + 84) * 120 + 285);
                        }
                        endShape(CLOSE);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 24:
                        
                        fill(0);
                        rect(275, 250, 320, 120, 30);
                        
                        fill(156, 212, 137);
                        strokeWeight(57);
                        stroke(136, 192, 117);
                        beginShape();
                        for(var i = 0; i < 9; i++) {
                            vertex(sin(i * 360 / 9 + 84) * 180 + 300, cos(i * 360 / 9 + 84) * 180 + 285);
                        }
                        endShape(CLOSE);
                        
                        stroke(142, 198, 123);
                        beginShape();
                        for(var i = 0; i < 9; i++) {
                            vertex(sin(i * 360 / 9 + 84) * 120 + 300, cos(i * 360 / 9 + 84) * 120 + 285);
                        }
                        endShape(CLOSE);
                        
                        stroke(148, 204, 129);
                        beginShape();
                        for(var i = 0; i < 9; i++) {
                            vertex(sin(i * 360 / 9 + 84) * 60 + 300, cos(i * 360 / 9 + 84) * 60 + 285);
                        }
                        endShape(CLOSE);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 25:
                        
                        fill(0);
                        quad(275, 285, 275 + 320, 250, 275 + 320, 370, 275, 335);
                        
                        fill(255, 60);
                        noStroke();
                        rect(520, 265, 60, 20, Infinity);
                        
                        fill(156, 212, 137);
                        strokeWeight(57);
                        stroke(136, 192, 117);
                        beginShape();
                        for(var i = 0; i < 9; i++) {
                            vertex(sin(i * 360 / 9 + 84) * 180 + 300, cos(i * 360 / 9 + 84) * 180 + 285);
                        }
                        endShape(CLOSE);
                        
                        stroke(142, 198, 123);
                        beginShape();
                        for(var i = 0; i < 9; i++) {
                            vertex(sin(i * 360 / 9 + 84) * 120 + 300, cos(i * 360 / 9 + 84) * 120 + 285);
                        }
                        endShape(CLOSE);
                        
                        stroke(148, 204, 129);
                        beginShape();
                        for(var i = 0; i < 9; i++) {
                            vertex(sin(i * 360 / 9 + 84) * 60 + 300, cos(i * 360 / 9 + 84) * 60 + 285);
                        }
                        endShape(CLOSE);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 26:
                        
                        fill(0);
                        rect(275, 250, 320, 120, 30);
                        
                        fill(183, 89, 242);
                        strokeWeight(55);
                        stroke(163, 69, 222);
                        beginShape();
                        for(var i = 0; i < 10; i++) {
                            vertex(sin(i * 360 / 10 + 84) * 180 + 300, cos(i * 360 / 10 + 84) * 180 + 285);
                        }
                        endShape(CLOSE);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 27:
                        
                        fill(0);
                        rect(275, 250, 320, 120, 30);
                        
                        fill(183, 89, 242);
                        strokeWeight(57);
                        stroke(163, 69, 222);
                        beginShape();
                        for(var i = 0; i < 10; i++) {
                            vertex(sin(i * 360 / 10 + 84) * 180 + 300, cos(i * 360 / 10 + 84) * 180 + 285);
                        }
                        endShape(CLOSE);
                        
                        stroke(169, 75, 228);
                        beginShape();
                        for(var i = 0; i < 10; i++) {
                            vertex(sin(i * 360 / 10 + 84) * 120 + 300, cos(i * 360 / 10 + 84) * 120 + 285);
                        }
                        endShape(CLOSE);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    // ok
                    // do not ask me why
                    // but
                    // for whatever reason
                    // the image in the 28 slot
                    // would literally not work
                    
                    case 29:
                        noStroke();
                        fill(0);
                        rect(275, 250, 320, 120, 30);
                        
                        fill(183, 89, 242);
                        strokeWeight(57);
                        stroke(163, 69, 222);
                        beginShape();
                        for(var i = 0; i < 10; i++) {
                            vertex(sin(i * 360 / 10 + 84) * 180 + 300, cos(i * 360 / 10 + 84) * 180 + 285);
                        }
                        endShape(CLOSE);
                        
                        stroke(169, 75, 228);
                        beginShape();
                        for(var i = 0; i < 10; i++) {
                            vertex(sin(i * 360 / 10 + 84) * 120 + 300, cos(i * 360 / 10 + 84) * 120 + 285);
                        }
                        endShape(CLOSE);
                        
                        stroke(175, 81, 234);
                        beginShape();
                        for(var i = 0; i < 10; i++) {
                            vertex(sin(i * 360 / 10 + 84) * 60 + 300, cos(i * 360 / 10 + 84) * 60 + 285);
                        }
                        endShape(CLOSE);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    /*break;
                    case 29:
                        
                        read above if confusion
                        tbh i probably did something wrong, but idrc
                        */
                    
                        background(0, 0);
                        noStroke();
                        fill(0);
                        quad(275, 285, 275 + 320, 250, 275 + 320, 370, 275, 335);
                        
                        fill(255, 60);
                        noStroke();
                        rect(520, 265, 60, 20, Infinity);
                        
                        fill(183, 89, 242);
                        strokeWeight(57);
                        stroke(163, 69, 222);
                        beginShape();
                        for(var i = 0; i < 10; i++) {
                            vertex(sin(i * 360 / 10 + 84) * 180 + 300, cos(i * 360 / 10 + 84) * 180 + 285);
                        }
                        endShape(CLOSE);
                        
                        stroke(169, 75, 228);
                        beginShape();
                        for(var i = 0; i < 10; i++) {
                            vertex(sin(i * 360 / 10 + 84) * 120 + 300, cos(i * 360 / 10 + 84) * 120 + 285);
                        }
                        endShape(CLOSE);
                        
                        stroke(175, 81, 234);
                        beginShape();
                        for(var i = 0; i < 10; i++) {
                            vertex(sin(i * 360 / 10 + 84) * 60 + 300, cos(i * 360 / 10 + 84) * 60 + 285);
                        }
                        endShape(CLOSE);
                        
                        towerImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 30:
                        
                        fill(215, 180, 180);
                        strokeWeight(30);
                        stroke(195, 160, 160);
                        beginShape();
                        for(var i = 0; i < 3; i++) {
                            vertex(sin(i * 360 / 3) * 180 + 300, cos(i * 360 / 3) * 180 + 285);
                        }
                        endShape(CLOSE);
                        
                        enemyImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 31:
                        
                        strokeWeight(30);
                        fill(220, 70, 80);
                        stroke(200, 50, 60);
                        beginShape();
                        for(var i = 0; i < 4; i++) {
                            vertex(sin(i * 360 / 4) * 180 + 300, cos(i * 360 / 4) * 180 + 300);
                        }
                        endShape(CLOSE);
                        
                        enemyImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 32:
                        
                        strokeWeight(30);
                        fill(120, 225, 80);
                        stroke(100, 205, 60);
                        beginShape();
                        for(var i = 0; i < 5; i++) {
                            vertex(sin(i * 360 / 5) * 180 + 300, cos(i * 360 / 5) * 180 + 300);
                        }
                        endShape(CLOSE);
                        
                        enemyImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 33:
                        
                        strokeWeight(30);
                        fill(120, 105, 240);
                        stroke(100, 85, 220);
                        beginShape();
                        for(var i = 0; i < 6; i++) {
                            vertex(sin(i * 360 / 6) * 180 + 300, cos(i * 360 / 6) * 180 + 300);
                        }
                        endShape(CLOSE);
                        
                        enemyImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 34:
                        
                        strokeWeight(30);
                        fill(200, 100, 200);
                        stroke(180, 80, 180);
                        beginShape();
                        for(var i = 0; i < 7; i++) {
                            vertex(sin(i * 360 / 7) * 180 + 300, cos(i * 360 / 7) * 180 + 300);
                        }
                        endShape(CLOSE);
                        
                        enemyImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 35:
                        
                        strokeWeight(30);
                        fill(60, 195, 60);
                        stroke(40, 175, 40);
                        beginShape();
                        for(var i = 0; i < 8; i++) {
                            vertex(sin(i * 360 / 8) * 180 + 300, cos(i * 360 / 8) * 180 + 300);
                        }
                        endShape(CLOSE);
                        
                        enemyImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 36:
                        
                        strokeWeight(30);
                        fill(210, 220, 150);
                        stroke(190, 200, 130);
                        beginShape();
                        for(var i = 0; i < 9; i++) {
                            vertex(sin(i * 360 / 9) * 180 + 300, cos(i * 360 / 9) * 180 + 300);
                        }
                        endShape(CLOSE);
                        
                        enemyImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 37:
                        
                        strokeWeight(30);
                        fill(120);
                        stroke(100);
                        beginShape();
                        for(var i = 0; i < 9; i++) {
                            vertex(sin(i * 360 / 9) * 180 + 300, cos(i * 360 / 9) * 180 + 300);
                        }
                        endShape(CLOSE);
                        
                        enemyImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 38:
                        
                        strokeWeight(30);
                        fill(230);
                        stroke(210);
                        beginShape();
                        for(var i = 0; i < 9; i++) {
                            vertex(sin(i * 360 / 9) * 180 + 300, cos(i * 360 / 9) * 180 + 300);
                        }
                        endShape(CLOSE);
                        
                        enemyImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    // coin image
                    case 39:
                        
                        stroke(192, 192, 36);
                        strokeWeight(40);
                        fill(222, 222, 66);
                        ellipse(300, 300, 300, 300);
                        
                        strokeWeight(30);
                        arc(300, 300, 100, 125, 60, 305);
                        
                        imgs.coin = get(0, 0, 600, 600);
                        
                    break;
                    
                    // heart
                    case 40:
                        
                        fill(235, 25, 25);
                        beginShape();
                        vertex(300, 400);
                        bezierVertex(409, 330, 364, 391, 300, 400);
                        bezierVertex(300, 300, 350, 200, 400, 300);
                        bezierVertex(409, 330, 383, 391, 310, 345);
                        bezierVertex(300, 300, 250, 200, 200, 300);
                        bezierVertex(201, 330, 194, 391, 290, 345);
                        endShape(CLOSE);
                        
                        triangle(209, 350, 390, 345, 300, 450);
                        rect(250, 334, 100, 50);
                        
                        imgs.hrt = get(0, 0, 600, 600);
                        
                    break;
                    
                    // path image
                    case 41:
                        
                        for(var i = 0; i < 19; i++) {
                            for(var j = 0; j < 19; j++) {
                                fill(random(225, 235), random(217, 227), random(151, 161));
                                rect(i * 30 + 15, j * 30 + 15, 30, 30);
                            }
                        }
                        
                        imgs.path = get(0, 0, 600, 600);
                        
                    break;
                    
                    case 42:
                        
                        fill(131, 159, 209);
                        strokeWeight(30);
                        stroke(119, 147, 197);
                        beginShape();
                        for(var i = 0; i < 3; i++) {
                            vertex(sin(i * 360 / 3) * 180 + 300, cos(i * 360 / 3) * 180 + 300);
                        }
                        endShape(CLOSE);
                        
                        enemyFrozImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 43:
                        
                        strokeWeight(30);
                        fill(134, 93, 149);
                        stroke(122, 80, 136);
                        beginShape();
                        for(var i = 0; i < 4; i++) {
                            vertex(sin(i * 360 / 4) * 180 + 300, cos(i * 360 / 4) * 180 + 300);
                        }
                        endShape(CLOSE);
                        
                        enemyFrozImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 44:
                        
                        strokeWeight(30);
                        fill(73, 187, 149);
                        stroke(63, 177, 138);
                        beginShape();
                        for(var i = 0; i < 5; i++) {
                            vertex(sin(i * 360 / 5) * 180 + 300, cos(i * 360 / 5) * 180 + 300);
                        }
                        endShape(CLOSE);
                        
                        enemyFrozImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 45:
                        
                        strokeWeight(30);
                        fill(73, 114, 246);
                        stroke(61, 102, 234);
                        beginShape();
                        for(var i = 0; i < 6; i++) {
                            vertex(sin(i * 360 / 6) * 180 + 300, cos(i * 360 / 6) * 180 + 300);
                        }
                        endShape(CLOSE);
                        
                        enemyFrozImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 46:
                        
                        strokeWeight(30);
                        fill(122, 111, 222);
                        stroke(109, 99, 209);
                        beginShape();
                        for(var i = 0; i < 7; i++) {
                            vertex(sin(i * 360 / 7) * 180 + 300, cos(i * 360 / 7) * 180 + 300);
                        }
                        endShape(CLOSE);
                        
                        enemyFrozImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 47:
                        
                        strokeWeight(30);
                        fill(36, 169, 136);
                        stroke(24, 156, 124);
                        beginShape();
                        for(var i = 0; i < 8; i++) {
                            vertex(sin(i * 360 / 8) * 180 + 300, cos(i * 360 / 8) * 180 + 300);
                        }
                        endShape(CLOSE);
                        
                        enemyFrozImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 48:
                        
                        strokeWeight(30);
                        fill(128, 184, 191);
                        stroke(117, 174, 181);
                        beginShape();
                        for(var i = 0; i < 9; i++) {
                            vertex(sin(i * 360 / 9) * 180 + 300, cos(i * 360 / 9) * 180 + 300);
                        }
                        endShape(CLOSE);
                        
                        enemyFrozImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 49:
                        
                        strokeWeight(30);
                        fill(73, 123, 173);
                        stroke(61, 111, 161);
                        beginShape();
                        for(var i = 0; i < 10; i++) {
                            vertex(sin(i * 360 / 10) * 180 + 300, cos(i * 360 / 10) * 180 + 300);
                        }
                        endShape(CLOSE);
                        
                        enemyFrozImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 50:
                        
                        strokeWeight(30);
                        fill(140, 190, 240);
                        stroke(130, 180, 230);
                        beginShape();
                        for(var i = 0; i < 11; i++) {
                            vertex(sin(i * 360 / 11) * 180 + 300, cos(i * 360 / 11) * 180 + 300);
                        }
                        endShape(CLOSE);
                        
                        enemyFrozImgs.push(get(0, 0, 600, 600));
                        
                    break;
                    
                    case 51:
                        
                        for(var i = 0; i < 20; i++) {
                            for(var j = 0; j < 20; j++) {
                                fill(random(25, 45) - (2 * j) - (2 * i), random(235, 255) - (2 * j) - (2 * i), random(152, 172) - (2 * j) - (2 * i));
                                rect(i * 30, j * 30, 30, 30);
                            }
                        }
                        
                        filter(BLUR, 11);
                        
                        imgs.backgrd2 = get(0, 0, 600, 600);
                        
                    break;
                    
                    // weird thing
                    // this is for the middle of the o's and r's in the titles and stuff
                    case 52:
                        
                        image(imgs.backgrd2, 0, 0, 600, 600);
                        
                        imgs.oB = get(210, 90, 20, 45);
                        
                        imgs.oB2 = get(312, 52, 11, 26);
                        
                        imgs.rB = get(449, 89, 23, 17);
                        
                        imgs.rB2 = get(344, 48.5, 16, 12);
                        
                    break;
                    
                    // settings icon
                    case 53:
                        
                        strokeWeight(25);
                        stroke(120);
                        fill(150);
                        beginShape();
                        
                        for(var i = 0; i < 6; i++) {
                            
                            vertex(sin(i * 360 / 6 + 60) * 180 + 300, cos(i * 360 / 6 + 60) * 180 + 300);
                            vertex(sin(i * 360 / 6 + 75) * 180 + 300, cos(i * 360 / 6 + 75) * 180 + 300);
                            vertex(sin(i * 360 / 6 + 90) * 125 + 300, cos(i * 360 / 6 + 90) * 110 + 300);
                            vertex(sin(i * 360 / 6 + 105) * 125 + 300, cos(i * 360 / 6 + 105) * 110 + 300);
                            
                        }
                        
                        endShape(CLOSE);
                        
                        stroke(255);
                        ellipse(300, 300, 95, 95);
                        
                        imgs.settings = get(75, 75, 450, 450);
                        
                    break;
                    
                    // TITLE :D
                    // you have no idea how 'fun' this was to make
                    case 54:
                        
                        stroke(200, 165, 165);
                        strokeWeight(5);
                        fill(235, 200, 200);
                        pushMatrix();
                        translate(-25, 0);
                        
                        // g
                        beginShape();
                        vertex(79, 75);
                        vertex(75, 79);
                        vertex(75, 146);
                        vertex(79, 150);
                        vertex(121, 150);
                        vertex(125, 146);
                        vertex(125, 109);
                        vertex(121, 105);
                        vertex(100, 105);
                        vertex(100, 115);
                        vertex(110, 115);
                        vertex(110, 135);
                        vertex(90, 135);
                        vertex(90, 90);
                        vertex(125, 90);
                        vertex(125, 79);
                        vertex(121, 75);
                        endShape(CLOSE);
                        
                        translate(-10, 0);
                        
                        // e
                        beginShape();
                        vertex(135, 79);
                        vertex(139, 75);
                        vertex(181, 75);
                        vertex(185, 79);
                        vertex(185, 90);
                        vertex(150, 90);
                        vertex(150, 105);
                        vertex(185, 105);
                        vertex(185, 120);
                        vertex(150, 120);
                        vertex(150, 135);
                        vertex(185, 135);
                        vertex(185, 146);
                        vertex(181, 150);
                        vertex(139, 150);
                        vertex(135, 146);
                        endShape(CLOSE);
                        
                        translate(-10, 0);
                        
                        // o
                        beginShape();
                        vertex(195, 79);
                        vertex(199, 75);
                        vertex(241, 75);
                        vertex(245, 79);
                        vertex(245, 146);
                        vertex(241, 150);
                        vertex(199, 150);
                        vertex(195, 146);
                        endShape(CLOSE);
                        rect(210, 90, 20, 45);
                        image(imgs.oB, 213, 93, 15, 40);
                        
                        translate(-10, 0);
                        
                        // m
                        beginShape();
                        vertex(259, 75);
                        vertex(255, 79);
                        vertex(255, 146);
                        vertex(259, 150);
                        vertex(269, 150);
                        vertex(269, 90);
                        vertex(283, 90);
                        vertex(283, 150);
                        vertex(297, 150);
                        vertex(297, 90);
                        vertex(311, 90);
                        vertex(311, 150);
                        vertex(321, 150);
                        vertex(325, 146);
                        vertex(325, 79);
                        vertex(321, 75);
                        endShape(CLOSE);
                        
                        translate(10, 0);
                        
                        // e
                        beginShape();
                        vertex(315, 79);
                        vertex(319, 75);
                        vertex(361, 75);
                        vertex(365, 79);
                        vertex(365, 90);
                        vertex(330, 90);
                        vertex(330, 105);
                        vertex(365, 105);
                        vertex(365, 120);
                        vertex(330, 120);
                        vertex(330, 135);
                        vertex(365, 135);
                        vertex(365, 146);
                        vertex(361, 150);
                        vertex(319, 150);
                        vertex(315, 146);
                        endShape(CLOSE);
                        
                        translate(-10, 0);
                        
                        // t
                        beginShape();
                        vertex(375, 79);
                        vertex(379, 75);
                        vertex(421, 75);
                        vertex(425, 79);
                        vertex(425, 90);
                        vertex(407.5, 90);
                        vertex(407.5, 146);
                        vertex(403.5, 150);
                        vertex(397.5, 150);
                        vertex(393.5, 146);
                        vertex(393.5, 90);
                        vertex(375, 90);
                        endShape(CLOSE);
                        
                        translate(-10, 0);
                        
                        // r
                        beginShape();
                        vertex(452, 125);
                        vertex(467, 150);
                        vertex(485, 150);
                        vertex(471, 120);
                        vertex(481, 120);
                        vertex(485, 116);
                        vertex(485, 79);
                        vertex(481, 75);
                        vertex(439, 75);
                        vertex(435, 79);
                        vertex(435, 146);
                        vertex(439, 150);
                        vertex(452, 150);
                        endShape(CLOSE);
                        rect(448, 88, 22, 18);
                        image(imgs.rB, 451, 91, 17, 13);
                        
                        translate(-18, 0);

                        // y
                        beginShape();
                        vertex(495, 75);
                        vertex(515, 75);
                        vertex(530, 100);
                        vertex(545, 75);
                        vertex(565, 75);
                        vertex(537.5, 120);
                        vertex(537.5, 150);
                        vertex(522.5, 150);
                        vertex(522.5, 120);
                        endShape(CLOSE);
                        
                        popMatrix();
                        
                        // o.O
                        imgs.niceTitle = get(40, 60, 525, 100);
                        
                    break;
                    
                    
                    // leaderboard
                    // there was more on here but not anymore lol
                    case 55:
                        
                        image(imgs.backgrd2, 0, 0, 600, 600);
                        
                        textSize(20);
                        outlineText("*all scores on medium mode", 375, 37.5);
                        
                        imgs.lead = get(0, 0, 600, 600);
                        
                    break;
                    
                    // map thumbnail 1
                    case 56:
                        
                        image(imgs.backgrd1, 0, 0, 600, 600);
                        
                        for(var i = 0; i < mappy[0].length; i++) {
                            
                            for(var j = 0; j < mappy[0][i].length; j++) {
                                
                                if(mappy[0][i][j] === "o") {
                                    
                                    image(imgs.path, j * (600 / 15), i * (600 / 15), (600 / 15), (600 / 15));
                                    
                                }
                                
                            }
                            
                        }
                        
                        imgs.map1 = get(0, 0, 600, 600);
                        
                    break;
                    
                    // map thumbnail 2
                    case 57:
                        
                        image(imgs.backgrd1, 0, 0, 600, 600);
                        
                        for(var i = 0; i < mappy[1].length; i++) {
                            
                            for(var j = 0; j < mappy[1][i].length; j++) {
                                if(mappy[1][i][j] === "o") {
                                    
                                    image(imgs.path, j * (600 / 15), i * (600 / 15), (600 / 15), (600 / 15));
                                    
                                }
                                
                            }
                            
                        }
                        
                        imgs.map2 = get(0, 0, 600, 600);
                        
                    break;
                    
                    // game customizer
                    // title
                    case 58:
                        
                        stroke(200, 165, 165);
                        strokeWeight(4);
                        fill(235, 200, 200);
                        pushMatrix();
                        
                        // c
                        beginShape();
                        vertex(160, 42);
                        vertex(162, 40);
                        vertex(193, 40);
                        vertex(195, 42);
                        vertex(195, 52);
                        vertex(193, 52);
                        vertex(172, 52);
                        vertex(172, 78);
                        vertex(193, 78);
                        vertex(195, 80);
                        vertex(195, 88);
                        vertex(193, 90);
                        vertex(162, 90);
                        vertex(160, 88);
                        endShape(CLOSE);
                        
                        // u
                        beginShape();
                        vertex(218, 78);
                        vertex(218, 42);
                        vertex(220, 40);
                        vertex(228, 40);
                        vertex(230, 42);
                        vertex(230, 88);
                        vertex(228, 90);
                        vertex(197, 90);
                        vertex(195, 88);
                        vertex(195, 42);
                        vertex(197, 40);
                        vertex(205, 40);
                        vertex(207, 42);
                        vertex(207, 78);
                        endShape(CLOSE);
                        
                        // s
                        beginShape();
                        vertex(230, 42);
                        vertex(232, 40);
                        vertex(263, 40);
                        vertex(265, 42);
                        vertex(265, 48);
                        vertex(263, 50);
                        vertex(240, 50);
                        vertex(240, 60);
                        vertex(263, 60);
                        vertex(265, 62);
                        vertex(265, 88);
                        vertex(263, 90);
                        vertex(232, 90);
                        vertex(230, 88);
                        vertex(230, 82);
                        vertex(232, 80);
                        vertex(255, 80);
                        vertex(255, 70);
                        vertex(232, 70);
                        vertex(230, 68);
                        endShape(CLOSE);
                        
                        // t
                        beginShape();
                        vertex(267, 52);
                        vertex(265, 50);
                        vertex(265, 42);
                        vertex(267, 40);
                        vertex(298, 40);
                        vertex(300, 42);
                        vertex(300, 50);
                        vertex(298, 52);
                        vertex(288.5, 52);
                        vertex(288.5, 88);
                        vertex(286.5, 90);
                        vertex(278.5, 90);
                        vertex(276.5, 88);
                        vertex(276.5, 52);
                        endShape(CLOSE);
                        
                        // o
                        rect(300, 40, 35, 50, 3);
                        rect(311, 51, 13, 28);
                        // the second part is later
        
                        // m
                        beginShape();
                        vertex(383, 90);
                        vertex(385, 88);
                        vertex(385, 42);
                        vertex(383, 40);
                        vertex(337, 40);
                        vertex(335, 42);
                        vertex(335, 88);
                        vertex(337, 90);
                        vertex(346, 90);
                        vertex(346, 50);
                        vertex(355, 50);
                        vertex(355, 90);
                        vertex(365, 90);
                        vertex(365, 50);
                        vertex(374, 50);
                        vertex(374, 90);
                        endShape(CLOSE);
                        
                        translate(15, 0);
                        
                        // i
                        beginShape();
                        vertex(372, 52);
                        vertex(370, 50);
                        vertex(370, 42);
                        vertex(372, 40);
                        vertex(403, 40);
                        vertex(405, 42);
                        vertex(405, 50);
                        vertex(403, 52);
                        vertex(393.5, 52);
                        vertex(393.5, 78);
                        vertex(403, 78);
                        vertex(405, 80);
                        vertex(405, 88);
                        vertex(403, 90);
                        vertex(372, 90);
                        vertex(370, 88);
                        vertex(370, 80);
                        vertex(372, 78);
                        vertex(381.5, 78);
                        vertex(381.5, 52);
                        endShape(CLOSE);
                        
                        // z
                        beginShape();
                        vertex(403, 52);
                        vertex(405, 50);
                        vertex(405, 42);
                        vertex(403, 40);
                        vertex(438, 40);
                        vertex(440, 42);
                        vertex(440, 52);
                        vertex(417, 78);
                        vertex(438, 78);
                        vertex(440, 80);
                        vertex(440, 90);
                        vertex(438, 90);
                        vertex(407, 90);
                        vertex(405, 88);
                        vertex(405, 78);
                        vertex(428, 52);
                        endShape(CLOSE);
                        
                        // e
                        beginShape();
                        vertex(440, 42);
                        vertex(442, 40);
                        vertex(473, 40);
                        vertex(475, 42);
                        vertex(475, 50);
                        vertex(450, 50);
                        vertex(450, 60);
                        vertex(475, 60);
                        vertex(475, 70);
                        vertex(450, 70);
                        vertex(450, 80);
                        vertex(475, 80);
                        vertex(475, 88);
                        vertex(473, 90);
                        vertex(442, 90);
                        vertex(440, 88);
                        endShape(CLOSE);
                        
                        // o center thing
                        image(imgs.oB2, 298, 53, 9, 24);
                        
                        popMatrix();
                        
                        // well named image
                        // yes or yes
                        // tell me in the t&t opinion on how well it is named
                        imgs.yes = get(155, 35, 350, 60);
                
                    break;
                    
                    // masking stuff for the middle of the a & d in the "leaders"
                    // because they are not rectangles, so cannot be a simple get()
                    // you have to mask them
                    // no complaints
                    case 59:
                        
                        image(imgs.backgrd2, 0, 0);
                        imgs.mask1 = get(0, 0, 600, 600);
                        imgs.mask2 = get(0, 0, 600, 600);
                        
                    break;
                    
                    case 60:
                        
                        fill(255);
                        beginShape();
                        vertex(247.5, 51);
                        vertex(238, 65);
                        vertex(265 - 8, 65);
                        endShape(CLOSE);
                        imgs.mask1Pair = get(0, 0, 600, 600);
                        
                    break;
                    
                    case 61:
                        
                        fill(255);
                        beginShape();
                        vertex(275, 50);
                        vertex(275, 80);
                        vertex(282, 80);
                        vertex(292, 70);
                        vertex(292, 60);
                        vertex(282, 50);
                        endShape(CLOSE);
                        imgs.mask2Pair = get(0, 0, 600, 600);
                        
                    break;
                    
                    // mhasquingk
                    case 62:
                        
                        imgs.mask1.mask(imgs.mask1Pair);
                        imgs.mask2.mask(imgs.mask2Pair);
                        
                    break;
                    
                    // leaders title
                    case 63:
                        
                        stroke(200, 165, 165);
                        strokeWeight(4);
                        fill(235, 200, 200);
                        
                        pushMatrix();
                        
                        // l
                        beginShape();
                        vertex(160, 42);
                        vertex(162, 40);
                        vertex(170, 40);
                        vertex(172, 42);
                        vertex(172, 78);
                        vertex(193, 78);
                        vertex(195, 80);
                        vertex(195, 88);
                        vertex(193, 90);
                        vertex(162, 90);
                        vertex(160, 88);
                        endShape(CLOSE);
                        
                        // e
                        beginShape();
                        vertex(195, 42);
                        vertex(197, 40);
                        vertex(228, 40);
                        vertex(230, 42);
                        vertex(230, 48);
                        vertex(228, 50);
                        vertex(207, 50);
                        vertex(207, 60);
                        vertex(228, 60);
                        vertex(230, 62);
                        vertex(230, 68);
                        vertex(228, 70);
                        vertex(207, 70);
                        vertex(207, 80);
                        vertex(228, 80);
                        vertex(230, 82);
                        vertex(230, 88);
                        vertex(228, 90);
                        vertex(197, 90);
                        vertex(195, 88);
                        endShape(CLOSE);
                        
                        // a
                        beginShape();
                        vertex(230, 88);
                        vertex(232, 90);
                        vertex(240, 90);
                        vertex(242, 88);
                        vertex(242, 75);
                        vertex(253, 75);
                        vertex(253, 88);
                        vertex(255, 90);
                        vertex(263, 90);
                        vertex(265, 88);
                        vertex(265, 58);
                        vertex(247.5, 40);
                        vertex(230, 58);
                        endShape(CLOSE);
                        
                        image(imgs.mask1, 0, 0);
                        
                        noFill();
                        beginShape();
                        vertex(247.5, 51);
                        vertex(238, 65);
                        vertex(265 - 8, 65);
                        endShape(CLOSE);
                        
                        stroke(200, 165, 165);
                        strokeWeight(4);
                        fill(235, 200, 200);
                        
                        // d
                        beginShape();
                        vertex(267, 40);
                        vertex(265, 42);
                        vertex(265, 88);
                        vertex(267, 90);
                        vertex(290, 90);
                        vertex(300, 80);
                        vertex(300, 50);
                        vertex(290, 40);
                        endShape(CLOSE);
                        image(imgs.mask2, 0, 0);
                        
                        noFill();
                        beginShape();
                        vertex(275, 50);
                        vertex(275, 80);
                        vertex(282, 80);
                        vertex(292, 70);
                        vertex(292, 60);
                        vertex(282, 50);
                        endShape(CLOSE);
                        
                        stroke(200, 165, 165);
                        strokeWeight(4);
                        fill(235, 200, 200);
                        
                        // e
                        beginShape();
                        vertex(300, 42);
                        vertex(302, 40);
                        vertex(335, 40);
                        vertex(335, 42);
                        vertex(335, 48);
                        vertex(333, 50);
                        vertex(312, 50);
                        vertex(312, 60);
                        vertex(333, 60);
                        vertex(335, 62);
                        vertex(335, 68);
                        vertex(333, 70);
                        vertex(312, 70);
                        vertex(312, 80);
                        vertex(333, 80);
                        vertex(335, 82);
                        vertex(335, 88);
                        vertex(333, 90);
                        vertex(302, 90);
                        vertex(300, 88);
                        endShape(CLOSE);
                        
                        // r
                        beginShape();
                        vertex(335, 42);
                        vertex(337, 40);
                        vertex(365, 40);
                        vertex(370, 50);
                        vertex(370, 68);
                        vertex(368, 70);
                        vertex(360, 70);
                        vertex(370, 90);
                        vertex(360, 90);
                        vertex(347, 75);
                        vertex(347, 90);
                        vertex(337, 90);
                        vertex(335, 88);
                        endShape(CLOSE);
                        rect(344, 48.5, 16, 12);
                        image(imgs.rB2, 345.5, 50, 12, 9);
                        
                        // s
                        beginShape();
                        vertex(370, 42);
                        vertex(372, 40);
                        vertex(403, 40);
                        vertex(405, 42);
                        vertex(405, 48);
                        vertex(403, 50);
                        vertex(380, 50);
                        vertex(380, 60);
                        vertex(403, 60);
                        vertex(405, 62);
                        vertex(405, 88);
                        vertex(403, 90);
                        vertex(372, 90);
                        vertex(370, 88);
                        vertex(370, 82);
                        vertex(372, 80);
                        vertex(395, 80);
                        vertex(395, 70);
                        vertex(372, 70);
                        vertex(370, 68);
                        endShape(CLOSE);
                        
                        popMatrix();
                        
                        imgs.leadTxt = get(155, 35, 350, 60);
                        
                    break;
                    
                    // this following code is now old, so its uncommented & unimportatnt
                    case 64:
                        
                        for(var i = 0; i < 8; i++) {
                            presents.push([i * 50 + 125, 525, 300, 615]);
                        }

                    break;
                    
                    case 65:
                        
                        background(0, 0, 0, 0);
                        fill(0);
                        textSize(380);
                        textFont(createFont("Montserrat Bold"));
                        textAlign(CENTER, CENTER);
                        text("SP", 295, 295);
                        fill(127.5);
                        text("SP", 300, 300);
                        fill(255);
                        text("SP", 305, 305);
                        for(var i = 0; i < 30; i++) {
                            for(var j = 0; j < 30; j++) {
                                logoImgs.push([get(i*30, j*30, 30, 30), i*30, j*30, 0, 285, false]);
                            }
                        }
                        
                    break;
                    
                    case 66:
                        
                        noStroke();
                        background(21, 0, 158);
                        for(var i = 0; i < height; i+= 10) {
                            fill(0, 3);
                            rect(0, i, width, height - i);
                        }
                        for(var i = 0; i < 600; i++) {
                            fill(255);
                            ellipse(random(0, width), random(0, height), random(0.5, 2.5), random(0.5, 2.5));
                        }
                        
                        bck = get(0, 0, 600, 600);
                        
                    break;
                    
                    // end the loading
                    case 68:
                        page = "logo";
                        
                    break;
                    
                }
                
                // loading
                loadAmt ++;
                
                // oh yeah more masking
                textFont(createFont("SP Custom Bold"));
                textSize(70);
                textAlign(CENTER, CENTER);
                background(0, 0);
                fill(210);
                text((loadAmt / 0.69).toFixed(1) + "%", 300, 255);
                var textMsk = get(0, 0, 600, 600);
                
                // lmk if this is ugly
                background(0, 0);
                fill(13);
                noStroke();
                rect(185, 265, 230, 100);
                fill(210);
                rect(185, 185, (loadAmt / 69) * 230, 300);
                var textMasker = get(0, 0, 600, 600);
                
                // at the time im writing this it is <1 hr till 2023 :D
                textMasker.mask(textMsk);
                
                noStroke();
                
                // background
                background(156, 140, 194);
                for(var i = 0; i < 1; i += 0.01) {
                    
                    fill(lerpColor(color(226, 200, 254), color(136, 120, 174), i));
                    rect(0, i * 1000, 600, 10);
                    
                }
                
                textAlign(CENTER, CENTER);
                textSize(100);
                outlineText("Loading...", 300, 150);
                
                textSize(37);
                outlineText(whatIsBeingLoaded[loadAmt - 1], 300, 325);
                
                textSize(70.2);
                fill(0);
                outlineText((loadAmt / 0.69).toFixed(1) + "%", 300, 255);
                image(textMasker, 0, 0, 600, 600);
                fill(50);
                rect(185, 375, 230, 50);
                fill(210);
                rect(185, 375, loadAmt / 69 * 230, 50);
                
            break;
            
            // logo
            case "logo":
                
                image(bck, 0, 0);
                imageMode(CENTER);
                
                for(var i in logoImgs) {
                    
                    pushMatrix();
                    translate(logoImgs[i][3] + 15, logoImgs[i][4]);
                    image(logoImgs[i][0], 0, 0);
                    
                    popMatrix();
                    
                    if(logoImgs[i][5]) {
                        logoImgs[i][3] += (logoImgs[i][1] - logoImgs[i][3]) / 15;
                        logoImgs[i][4] += (logoImgs[i][2] - logoImgs[i][4]) / 15;
                        
                    }
                    
                }
                
                if(logoTimer < 180) {
                    
                    logoImgs[logoTimer * 5][5] = true;
                    logoImgs[logoTimer * 5 - 1][5] = true;
                    logoImgs[logoTimer * 5 - 2][5] = true;
                    logoImgs[logoTimer * 5 - 3][5] = true;
                    logoImgs[logoTimer * 5 - 4][5] = true;
                    
                }
                
                imageMode(CORNER);
                
                if(logoTimer > 90) {
                    
                    for(var i in presents) {
                        
                        textSize(height / 15);
                        textFont(createFont("Montserrat Bold"));
                        fill(255);
                        text(pMsg[i], presents[i][2], presents[i][3]);
                        
                        if(logoTimer > 165) {
                            presents[i][2] += (presents[i][0] - presents[i][2]) / 15;
                            presents[i][3] += (presents[i][1] - presents[i][3]) / 15;
                        }
                        
                    }
                    
                }
                
                if(logoTimer > 390) {
                    transImg = get(0, 0, width, height);
                    page = "maine";
                }
                
                logoTimer ++;
            
            break;
            
            // menu
            case "maine":
                
                image(imgs.backgrd2, 0, 0, 600, 600);
                
                // path
                for(var i = 0; i < 7; i++) {
                    pushMatrix();
                    rotate(30);
                    translate(i * 150 + pageTrans.path, 150);
                    image(imgs.path, 0, 0, 160, 160);
                    popMatrix();
                }
                
                // path transition
                if(pageTrans.defenses[6] < 252) {
                    pageTrans.path += (0 - pageTrans.path) / 29;
                }
                
                // title
                imageMode(CENTER);
                pushMatrix();
                translate(pageTrans.geometryTitle, 110);
                scale(1.41);
                rotate(pageTrans.geometryTitle - 343);
                image(imgs.niceTitle, 0, 0, 500, 92);
                popMatrix();
                
                pageTrans.geometryTitle += (353 - pageTrans.geometryTitle) / 35;
                
                // bullet
                if(pageTrans.towerRot < 7) {
                    
                    strokeWeight(1);
                    stroke(0);
                    fill(220, 174, 143);
                    ellipse(pageTrans.bullet, 300, 8, 8);
                    pageTrans.bullet += (210 - pageTrans.bullet) / 20;
                }
                
                // menu button transitions
                if(pageTrans.bullet < 225) {
                    
                    pageTrans.menuBtns -= (pageTrans.menuBtns) / 25;
                    buttons.play.pos.x += (380 - buttons.play.pos.x) / 23;
                    buttons.lead.pos.x += (400 - buttons.lead.pos.x) / 23;
                    
                }
                  
                // super tower
                pushMatrix();
                translate(pageTrans.towerPos + 130, 500);
                rotate(249 + pageTrans.towerRot);
                drawTower(0, 0, 150, 6);
                popMatrix();
                
                // machine gun tower
                pushMatrix();
                translate(pageTrans.towerPos + 350, 300);
                rotate(175 + pageTrans.towerRot);
                drawTower(0, 0, 150, 1, 3);
                popMatrix();
                
                imageMode(CORNER);
                        
                // defense
                textSize(100);
                textFont(createFont("SP Custom Bold"));
                outlineText("D", 100, pageTrans.defenses[0]);
                outlineText("E", 166, pageTrans.defenses[1]);
                outlineText("F", 224, pageTrans.defenses[2]);
                outlineText("E", 279, pageTrans.defenses[3]);
                outlineText("N", 337, pageTrans.defenses[4]);
                outlineText("S", 405, pageTrans.defenses[5]);
                outlineText("E", 465, pageTrans.defenses[6]);
                
                // defense transition
                if(pageTrans.geometryTitle > 348) {
                    
                    for(var i = 0; i < pageTrans.defenses.length; i++) {
                        pageTrans.defenses[i] -= (pageTrans.defenses[i] - 200 - (i * 7)) / ((5 * i) + 20);
                    }
                    
                }
                
                // tower transitions
                if(pageTrans.path > -5) {
                    pageTrans.towerPos -= (pageTrans.towerPos) / 28;
                    pageTrans.towerRot -= (pageTrans.towerRot) / 28;
                }
                
                // spinning enemy
                imageMode(CENTER);
                pushMatrix();
                translate(75 + pageTrans.path, 302);
                rotate(frameCount * 1.01);
                drawEnemy(0, 0, 200, 2);
                popMatrix();
                
                imageMode(CORNER);
                
                // thumbnail
                if(!keyIsPressed) {
                    
                    // buttons
                    pushMatrix();
                    translate(pageTrans.menuBtns, 0);
                    buttons.play.draw();
                    buttons.lead.draw();
                    popMatrix();
                    
                }
                
                // well technically this is the thumbnail
                else {
                    noLoop();
                }
                
                image(transImg, transImgX, 0);
                transImgX += (600 - transImgX) / 10;
                
            break;
            
            // leaderboard
            case "lead":
                
                if(mouseIsPressed) {
                    pressed = true;
                }
                
                leadScroll = constrain(leadScroll, -(ldB.length * 55 - 350), 0);
                
                image(imgs.lead, 0, 0);
                
                pushMatrix();
                translate(0, leadScroll);
                
                // nice
                imageMode(CENTER);
                pushMatrix();
                translate(390, 100);
                rotate(6);
                image(imgs.leadTxt, 0, 0, 500, 91);
                popMatrix();
                imageMode(CORNER);
                
                noStroke();
                textSize(25);
                
                for(var i = 0; i < ldB.length; i++) {
                    
                    textAlign(LEFT, CENTER);
                    fill(0, 50);
                    rect(60, i * 55 + 175, 480, 50, 10);
                    
                    // the gold/silver/bronze/plain leaderboard numbers
                    switch (i) {
                        
                        case 0:
                            
                            outlineText((i + 1), 75, i * 55 + 200, color(214, 186, 126));
                            
                        break;
                        
                        case 1:
                            
                            outlineText((i + 1), 75, i * 55 + 200, 200);
                            
                        break;
                        
                        case 2:
                            
                            outlineText((i + 1), 75, i * 55 + 200, color(184, 156, 96));
                            
                        break;
                        
                        default:
                        
                            outlineText((i + 1), 75, i * 55 + 200);
                        
                    }
                    
                    outlineText(ldB[i][0], 150, i * 55 + 200);
                    
                    textAlign(RIGHT, CENTER);
                    if(ldB[i][1] !== 0) {
                        outlineText(ldB[i][1], 500, i * 55 + 200);
                    }
                    
                    if(i !== 0) {
                        
                        if(ldB[i - 1][1] < ldB[i][1]) {
                            arrSwap = ldB[i - 1];
                            ldB[i - 1] = ldB[i];
                            ldB[i] = arrSwap;
                        }
                        
                    }
                    
                }
                
                textAlign(CENTER, CENTER);
                
                popMatrix();
                
                if(pressed) {
                    leadScroll += mouseY - pmouseY;
                }
                
                buttons.bck.draw();
                
            break;
            
            case "picker":
                
                image(imgs.backgrd2, 0, 0, 600, 600);
                
                imageMode(CENTER);
                pushMatrix();
                translate(355, 100);
                rotate(6);
                image(imgs.yes, 0, 0, 450, 85);
                // 35:6
                popMatrix();
                imageMode(CORNER);
                
                buttons.map1.draw();
                buttons.map2.draw();
                
                textSize(45);
                outlineText("Select a mode", 300, 375);
                
                buttons.easMod.draw();
                buttons.medMod.draw();
                buttons.harMod.draw();
                
                textSize(20);
                outlineText(selMode !== 1 ? "***Only medium mode scores count for the leaderboard***\nTHIS IS NOT ELIGIBLE" : "***Only medium mode scores count for the leaderboard***", 300, 555, color(235, 140, 140));
                
                buttons.bck.draw();
                
                buttons.strtGm.draw();
                
            break;
            
            case "gm":
                
                textFont(createFont("Arial"));
                textAlign(CENTER, CENTER);
                cannotTower = false;
                image(imgs.backgrd1, 0, 0, 600, 600);
                
                if(selTower !== null) {
                    cursorTyp = "c";
                }
                
                strokeWeight(2);
                stroke(50);
                
                // draw map
                // and place towers
                
                for(var i = 0; i < mappy[selMap].length; i++) {
                    
                    for(var j = 0; j < mappy[selMap][i].length; j++) {
                        
                        // draw path
                        if(mappy[selMap][i][j] === "o") {
                            
                            image(imgs.path, j * (600 / 15), i * (600 / 15), (600 / 15), (600 / 15));
                            
                        }
                    }
                }
                
                for(var i = 0; i < mappy[selMap].length; i++) {
                    
                    for(var j = 0; j < mappy[selMap][i].length; j++) {
                        
                        // draw path
                        if(mappy[selMap][i][j] !== "o" && cursorCollide(j * (600 / 15), i * (600 / 15), (600 / 15), (600 / 15)) && selTower !== null) {
                            
                            // if you cannot place the tower
                            for(var m = 0; m < towers.length; m++) {
                                
                                if(towers[m].pos.x === (j + 0.5) * (600 / 15) && towers[m].pos.y === (i + 0.5) * (600 / 15)) {
                                    cannotTower = true;
                                }
                                
                            }
                            
                            // basically if you can place a tower
                            if(!cannotTower && !cursorCollide(0, 400, 160, 200) && !cursorCollide(160, 520, 260, 80) && !cursorCollide(480, 0, 120, 120)) {
                                
                                strokeWeight(1);
                                stroke(0, 150);
                                fill(255, 40);
                                rect(j * (600 / 15) + 1, i * (600 / 15) + 1, (600 / 15) - 2, (600 / 15) - 2);
                                
                                drawTower(j * (600 / 15) - 4, i * (600 / 15) - 4, 48, selTower);
                                
                                fill(0, 30);
                                stroke(0);
                                ellipse(j * (600 / 15) + 20, i * (600 / 15) + 20, towerRan[selTower] * 2, towerRan[selTower] * 2);
                                
                                if(clicked && mystats.health > 0 && wave.waveNum !== 32) {
                                    
                                    // place tower
                                    if(mystats.coins >= towerPric[selTower]) {
                                        
                                        doSound(0);
                                        
                                        towers.push(new tower(selTower, ((j + 0.5) * (600 / 15)), ((i + 0.5) * (600 / 15))));
                                        towers[towers.length - 1].part();
                                        mystats.coins -= towerPric[selTower];
                                        pricD.push(new pricDrop(80, 525, towerPric[selTower]));
                                        selTower = null;
                                        
                                    }
                                    
                                }
                                
                            }
                            
                            else {
                                cursorTyp = "n";
                            }
                            
                        }
                        
                    }
                    
                }
                
                // draw bullets
                for(var i = bullets.length - 1; i >= 0; i--) {
                    
                    bullets[i].draw();
                    bullets[i].func();
                    
                    if(bullets[i].die) {
                        bullets.splice(i, 1);
                    }
                    
                }
                
                // draw towers
                for(var i = towers.length - 1; i >= 0; i--) {
                    
                    if(towers[i].up) {
                        towerUp = i;
                        page = "uptow";
                    }
                    
                    towers[i].draw();
                    towers[i].func();
                    
                    if(towers[i].die) {
                        towers.splice(i, 1);
                    }
                    
                }
                
                // so that the hover thing isnt overshadowed by the towers farther in the array
                for(var m = 0; m < towers.length; m++) {
                    
                    if(cursorCollide(towers[m].pos.x - 19, towers[m].pos.y - 19, 38, 38)) {
                        cursorTyp = "h";
                        towers[m].hover();
                    }
                    
                }
                
                // "spawning" in enemies
                if(wave.started || wave.prog === 0 && waves[wave.waveNum].length === 1) {
                    
                    if(floor(wave.waveTimer) % floor(waveDiff[wave.waveNum] / 3) === 0) {
                        
                        if(waves[wave.waveNum][wave.prog] > -1) {
                            enemys.push(new enemy(waves[wave.waveNum][wave.prog], 60, -100));
                        }
                        
                        wave.prog++;
                        enemyCoords = [];
                        enemyCoords.push();
                        
                    }
                    
                }
                
                // ending a wave
                if(enemys.length === 0 && wave.started && wave.prog > 0 && wave.prog >= waves[wave.waveNum].length) {
                    
                    wave.ended = true;
                    wave.started = false;
                    
                }
                
                if(wave.started) {
                    
                    wave.waveTimer++;
                    
                    // enemies
                    for(var i = enemys.length - 1; i >= 0; i--) {

                        enemys[i].draw();
                        enemys[i].func();
                        
                        if(enemys[i].die) {
                            
                            // add enemy bits -- i mean, particles
                            if(enemys[i].health <= 0) {
                                
                                for(var k = 0; k < 40; k++) {
                                    particles.push(new Particle(enemys[i].pos.x + random(-5, 5), enemys[i].pos.y + random(-5, 5), enemys[i].col));
                                }
                                
                                // the coin thing
                                switch(enemys[i].bounty) {
                                    
                                    case 1:
                                        tinyCoins.push(new tinyCoin(enemys[i].pos.x, enemys[i].pos.y, 1));
                                    break;
                                    
                                    case 4:
                                        for(var l = 0; l < 4; l++) {
                                            tinyCoins.push(new tinyCoin(enemys[i].pos.x, enemys[i].pos.y, 1));
                                        }
                                    break;
                                    
                                    case 6:
                                        for(var l = 0; l < 6; l++) {
                                            tinyCoins.push(new tinyCoin(enemys[i].pos.x, enemys[i].pos.y, 1));
                                        }
                                    break;
                                    
                                    case 8:
                                        for(var l = 0; l < 8; l++) {
                                            tinyCoins.push(new tinyCoin(enemys[i].pos.x, enemys[i].pos.y, 1));
                                        }
                                    break;
                                    
                                    case 14:
                                        for(var l = 0; l < 7; l++) {
                                            tinyCoins.push(new tinyCoin(enemys[i].pos.x, enemys[i].pos.y, 2));
                                        }
                                    break;
                                    
                                    case 31:
                                        
                                       for(var l = 0; l < 7; l++) {
                                            tinyCoins.push(new tinyCoin(enemys[i].pos.x, enemys[i].pos.y, 4));
                                        }
                                        
                                        tinyCoins.push(new tinyCoin(enemys[i].pos.x, enemys[i].pos.y, 3));
                                        
                                    break;
                                    
                                    case 62:
                                        
                                        for(var l = 0; l < 10; l++) {
                                            tinyCoins.push(new tinyCoin(enemys[i].pos.x, enemys[i].pos.y, 6));
                                        }
                                        tinyCoins.push(new tinyCoin(enemys[i].pos.x, enemys[i].pos.y, 2));
                                    break;
                                    
                                    case 17:
                                        for(var l = 0; l < 7; l++) {
                                            tinyCoins.push(new tinyCoin(enemys[i].pos.x, enemys[i].pos.y, 2));
                                        }
                                        tinyCoins.push(new tinyCoin(enemys[i].pos.x, enemys[i].pos.y, 1));
                                    break;
                                    
                                    case 86:
                                        for(var l = 0; l < 10; l++) {
                                            tinyCoins.push(new tinyCoin(enemys[i].pos.x, enemys[i].pos.y, 8));
                                        }
                                        tinyCoins.push(new tinyCoin(enemys[i].pos.x, enemys[i].pos.y, 6));
                                    break;
                                    
                                }
                                
                                
                                doSound(5);
                                
                            }
                            
                            else {
                                
                                // if enemy got past your entire barrage
                                
                                mystats.health --;
                                
                                doSound(4);
                                
                                pricD.push(new pricDrop(76, 558, 1));
                                
                                for(var k = 0; k < 20; k++) {
                                    particles.push(new Particle(31, 561, color(255, 0, 0)));
                                }
                                
                            }
                            
                            // so bug no hapen
                            for(var j = 0; j < towers.length; j++) {
                                if(towers[j].targ === i) {
                                    towers[j].targ = null;
                                }
                                
                            }
                            
                            enemys.splice(i, 1);
                            enemyCoords.splice(i, 1);
                            
                        }
                        
                    }
                    
                }
                
                // for sm00thness
                if(wave.ended && wave.prog >= waves[wave.waveNum].length) {
                    wave.doneTimer++;
                }
                
                // popup page thing
                if(wave.doneTimer > 240 && particles.length === 0 && mystats.health > 0 && wave.waveNum !== 32) {
                    doSound(3);
                    page = "popup";
                }
                
                // health & coins
                fill(255, 100);
                rect(10, 500, 108, 90, 10);
                
                fill(150);
                textSize(22);
                textAlign(LEFT, CENTER);
                
                outlineText(mystats.coins, 57, 531.5);
                
                outlineText(mystats.health, 57, 562.5, mystats.health <= 3 && wave.waveNum !== 32 ? color(255, sin(frameCount * (-mystats.health + 3.5) / 2) * 127.5 + 140, sin(frameCount * (-mystats.health + 3.5) / 2) * 127.5 + 140) : 255);
                
                // tiny coins
                for(var j = tinyCoins.length - 1; j >= 0; j--) {
                    
                    tinyCoins[j].draw();
                    
                    if(tinyCoins[j].die) {
                        doSound(1);
                        mystats.coins += tinyCoins[j].bnty;
                        waveStats.coins ++;
                        tinyCoins.splice(j, 1);
                    }
                    
                }
                
                // just have to be drawn here because ^
                image(imgs.coin, 3, 503, 60, 60);
                image(imgs.hrt, -2, 524, 70, 70);
                
                // next wave button... if applicable
                if(!wave.started && !wave.ended && mystats.health > 0) {
                    buttons.nextWav.draw();
                }
                
                // opening the shop
                if(cursorCollide(200, 550, 200, 50)) {
                    page = "opened";
                }
                
                // shop popup thingy
                fill(150);
                noStroke();
                quad(200, shopY, 225, shopY - 50, 375, shopY - 50, 400, shopY);
                rect(0, shopY, 600, 10);
                strokeWeight(2.5);
                stroke(100);
                line(300, shopY - 40, 275, shopY - 13);
                line(300, shopY - 40, 325, shopY - 13);
                
                if(shopY < 600) {
                    shopY += 3;
                }
                
                // draw particles
                if(sliders[0].output) {
                    
                    for(var i = particles.length - 1; i >= 0; i--) {
                        
                        noStroke();
                        particles[i].draw();
                        
                        if(particles[i].opac < 0) {
                        
                            particles.splice(i, 1);
                          
                        }
                            
                    }
                    
                }
                
                else if(frameCount % 200 === 0) {
                    particles = [];
                }
                
                // settings button
                buttons.sett.draw();
                
                // price drop thingy
                // ok its not a good name but nobodys going to read this anyway
                for(var i = pricD.length - 1; i >= 0; i--) {
                    
                    pricD[i].draw();
                    
                    if(pricD[i].y > 650 || pricD[i].life > 270) {
                        pricD.splice(i, 1);
                        
                    }
                    
                }
                
                // if you won / L'd
                if(wave.waveNum === 32 || mystats.health <= 0) {
                    
                    // stop things from functioning
                    for(var j = 0; j < enemys.length; j++) {
                        enemys[j].xV = 0;
                        enemys[j].yV = 0;
                    }

                    bullets = [];
                    
                    // score
                    if(scorTim > 240 || scorIdx >= 0) {
                        
                        fill(200, 155);
                        strokeWeight(4);
                        stroke(120);
                        rect(150, 50, 300, 100, 5);
                        
                        textSize(42);
                        textAlign(CENTER, CENTER);
                        outlineText("Score: " + round(scoar), 300, 100);
                        
                    }
                    
                    if(scorTim > 540 && scorIdx === -1) {
                        scorIdx = 0;
                    }
                    
                    scorTim++;
                    
                    // this is just kind of a mess
                    switch (scorIdx) {
                        
                        case 0:
                            
                            if(scorTim > 90) {
                                scorIdx = 1;
                                scorTim = 0;
                            }
                            
                        break;
                        
                        case 1:
                            
                            if(frameCount % (90 / 10) === 0 && towers.length > 0 && scorTim > 60) {
                                
                                scoar += towers[0].spendt;
                                towers[0].spendt = 0;
                                towers[0].part();
                                towers[0].part();
                                towers[0].sell();
                                
                                doSound(6);
                                
                            }
                            
                            if(towers.length === 0 && scorTim > 61) {
                                scorIdx = 2;
                                scorTim = 0;
                            }
                            
                        break;
                        
                        case 2:
                            
                            if(mystats.coins > 3 && scorTim > 180) {
                                mystats.coins -= 7;
                                scoar += 7;
                                if(frameCount % 60 === 0) {
                                    doSound(1);
                                }
                            }
                            
                            else if(scorTim > 181) {
                                
                                scoar += mystats.coins;
                                mystats.coins = 0;
                                
                                scorIdx = 3;
                                scorTim = 0;
                                
                            }
                            
                        break;
                        
                        case 3:
                            
                            if(mystats.health === 0 && scorTim < 180) {
                                scorIdx = 5;
                            }
                            
                            else if(frameCount % 25 === 0 && mystats.health > 0 && scorTim > 180) {
                                
                                mystats.health--;
                                pricD.push(new pricDrop(76, 558, 1));
                                scoar += 75;
                                
                            }
                            
                            if(mystats.health === 0 && scorTim > 180) {
                                scorTim = 0;
                                scorIdx = 4;
                            }
                            
                        break;
                        
                        // if won
                        case 4:
                            
                            if(low_lag_transition) {
                                transitions.push(new transy());
                            }
                            else {
                                trans.img = get(0, 0, 600, 600);
                                trans.started = true;
                                trans.fil = 255;
                            }
                            
                            if(scorTim > 240) {
                                page = "vic";
                            }
                            
                        break;
                        
                        // if didn't
                        case 5:
                            
                            if(low_lag_transition) {
                                transitions.push(new transy());
                            }
                            else {
                                trans.img = get(0, 0, 600, 600);
                                trans.started = true;
                                trans.fil = 255;
                            }
                            
                            page = "l";
                            
                        break;
                        
                    }
                    
                }
                
                // shop backgrounding
                // not really just for shop but originally that was what it was for
                
                if(wave.started && waves[wave.waveNum].length !== 1) {
                
                    noFill();
                    strokeWeight(5);
                    stroke(255, 0, 0);
                    ellipse(70, 450, 80, 80);
                    
                    strokeWeight(6);
                    stroke(0, 255, 47);
                    arc(70, 450, 80, 80, 270, wave.prog / waves[wave.waveNum].length * 360 + 270);
                    
                    textAlign(CENTER, CENTER);
                    
                    textSize(20);
                    
                    outlineText(round(constrain(wave.prog, 0, waves[wave.waveNum].length) / waves[wave.waveNum].length * 100) + "%", 70, 435);
                    
                    textSize(13);
                    outlineText("Wave\nCompletion", 70, 465);
                }
                
                if(page !== "gm") {
                    if(page === "vic" || page === "l") {
                        filter(BLUR, 2);
                    }
                    imgs.shopBck = get(0, 0, 600, 600);
                }

            break;
            
            case "settings":
                
                image(imgs.shopBck, 0, 0, 600, 600);
                
                fill(0, 50);
                noStroke();
                rect(0, 0, 600, 600);
                
                fill(185);
                strokeWeight(5);
                stroke(76);
                rect(150, 140, 300, 320);
                
                textSize(33);
                textAlign(CENTER, CENTER);
                outlineText("Game Settings", pageTrans.setXB, 166, 255, pageTrans.setXBT);
                
                fill(255, pageTrans.setBckFill);
                strokeWeight(pageTrans.setBckStrk);
                rect(pageTrans.setBck, 200, 280, 55, 5);
                rect(pageTrans.setBck, 260, 280, 55, 5);
                rect(pageTrans.setBck, 320, 280, 55, 5);
                rect(pageTrans.setBck, 380, 280, 55, 5);
                
                // trnasitions
                pageTrans.setX += (165 - pageTrans.setX) / 20;
                pageTrans.setXT += (255 - pageTrans.setXT) / 20;
                pageTrans.setXB += (275 - pageTrans.setXB) / 20;
                pageTrans.setXBT += (255 - pageTrans.setXBT) / 20;
                pageTrans.setBckFill += (40 - pageTrans.setBckFill) / 20;
                pageTrans.setBck += (160 - pageTrans.setBck) / 20;
                pageTrans.setBckStrk += (2.5 - pageTrans.setBckStrk) / 10;
                
                textAlign(LEFT, CENTER);
                textSize(28);
                
                outlineText("Particles", pageTrans.setX, 217, 255, pageTrans.setXT);
                
                outlineText("Sound", pageTrans.setX, 216 + 122, 255, pageTrans.setXT);
                
                textSize(23);
                outlineText("Volume - " + round(100 * volume) + "%", pageTrans.setX, 216 + 180, 255, pageTrans.setXT);
                
                textSize(22);
                outlineText("Frozen Enemies", pageTrans.setX, 216 + 60, 255, pageTrans.setXT);
                
                textSize(15);
                fill(0, pageTrans.setXT);
                
                text("Draw particles", pageTrans.setX, 242);
                
                text("Play audio & sounds", pageTrans.setX, 362);
                
                textSize(14.2);
                text("Enemies are blue if frozen", pageTrans.setX, 302);
                
                fill(0, pageTrans.setXT / 2.55);
                rect(pageTrans.setX + 10, 415, 250, 8, Infinity);
                fill(sliders[2].output ? 230 : 120, pageTrans.setXT);
                ellipse(volume * 250 + pageTrans.setX + 10, 419, 15, 15);
                
                // set volume
                for(var i = 0; i < sounds.length; i++) {
                    
                    sounds[i].audio.volume = volume;
                    
                    // minor stuff
                    sounds[0].audio.playbackRate = 0.85;
                    sounds[1].audio.volume = volume * 0.2;
                    sounds[2].audio.volume = constrain(volume * 1.4, 0, 1);
                    sounds[2].audio.playbackRate = 1.1;
                    sounds[5].audio.preservePitch = false;
                    sounds[5].audio.playbackRate = 0.75;
                    
                }
                
                if(dist(mouseX, mouseY, volume * 250 + pageTrans.setX + 10, 419) < 7.5) {
                    cursorTyp = "g";
                }
                
                if(mouseIsPressed && dist(mouseX, mouseY, volume * 250 + pageTrans.setX + 10, 419) < 7.5) {
                    pressed = true;
                }
                
                if(pressed) {
                    cursorTyp = "G";
                    volume = (mouseX - 10 - pageTrans.setX) / 250;
                }
                
                // try removing this. and see what happens.
                // >:)
                // its not that big of a deal it just doesnt work if you try to set it <0 or >100 %
                volume = constrain(volume, 0, 1);
                
                buttons.extSta.draw();
                
                for(var i = 0; i < sliders.length; i++) {
                    sliders[i].draw();
                    sliders[i].func();
                }
                    
            break;
            
            // if you didnt lose
            // surprisingly
            case "vic":
                
                textAlign(CENTER, CENTER);
                
                image(imgs.shopBck, 0, 0, 600, 600);
                
                noStroke();
                fill(0, 50);
                rect(0, 0, 600, 600);
                
                // annoying animation
                lAnim[0] += (300 - lAnim[0]) / 75;
                
                if(lAnim[0] > 50) {
                    lAnim[1] += (300 - lAnim[1]) / 75;
                }
                
                if(lAnim[1] < 304) {
                    lAnim[2] += (300 - lAnim[2]) / 80;
                }
                
                if(lAnim[2] > 295) {
                    lAnim[3] += (375 - lAnim[3]) / 75;
                }
                
                if(lAnim[3] < 376) {
                    
                    if(lAnim[4] < scoar) {
                        lAnim[4] += 11;
                    }
                    else {
                        lAnim[4] = scoar;
                    }
                    
                }
                
                textSize(100);
                textFont(createFont("SP Custom Bold"));
                outlineText("YOU", lAnim[0], 50);
                
                textSize(70);
                outlineText("have attained", lAnim[1], 145);
                
                textSize(45);
                outlineText("You even scored...", 300, lAnim[3]);
                
                textSize(125);
                outlineText("VICTORY", lAnim[2], 255);
                
                // score
                fill(200, 200);
                strokeWeight(6);
                stroke(100);
                rect(150, lAnim[3] + 45, 300, 90, 10);
                
                textSize(55);
                outlineText(round(lAnim[4]), 300, lAnim[3] + 90);
                
                if(lAnim[4] === scoar) {
                    buttons.bck.draw();
                }
                
                // easter egg
                // no its not actually
                // i just put this here randomly because ik someone would ctrl + f to try and find it
                // this easter egg is ctrl + f proof
                
                textSize(18);
                textFont(createFont("SP Custom Bold"));
                if(selMode !== 1) {
                    outlineText("*This score\nis ineligible\n(Must be\nmedium)", 520, (530 - 440) + lAnim[3]);
                }
                
                else {
                    
                    outlineText("*Put this in the\nT&T to be on\nthe leaderboard\n(Spinoff proof\nfor 14k+)", 520, (530 - 440) + lAnim[3]);
                    
                    // updating score in leaderboard
                    if(lAnim[4] === scoar) {
                        
                        if(bestScores[selMap] < scoar) {
                            bestScores[selMap] = round(scoar);
                        }
                        
                        for(var i = 0; i < ldB.length; i++) {
                            
                            if(ldB[i][0] === "You") {
                                if(ldB[i][1] < scoar) {
                                    ldB[i][0] = "You";
                                    ldB[i][1] = round(scoar);
                                }
                            }
                            
                        }
                        
                    }
                }
                
            break;
            
            // if you didnt win
            // i mean how lmao
            // basically the same as above but it says "l" instead of "victory"
            // and particles
            case "l":
                
                textAlign(CENTER, CENTER);
                
                image(imgs.shopBck, 0, 0, 600, 600);
                
                noStroke();
                fill(0, 50);
                rect(0, 0, 600, 600);
                
                // particles behind L
                for(var i = particles.length - 1; i >= 0; i--) {
                    
                    particles[i].draw();
                    
                    if(particles[i].opac < 0) {
                        
                        particles.splice(i, 1);
                        
                    }
                    
                }
                
                // ugh
                lAnim[0] += (300 - lAnim[0]) / 75;
                
                if(lAnim[0] > 50) {
                    lAnim[1] += (300 - lAnim[1]) / 75;
                }
                
                if(lAnim[1] < 304) {
                    lAnim[2] += (300 - lAnim[2]) / 60;
                }
                
                if(lAnim[2] > 295) {
                    lAnim[3] += (445 - lAnim[3]) / 75;
                }
                
                if(lAnim[3] < 446) {
                    
                    if(lAnim[4] < scoar) {
                        lAnim[4] += 11;
                    }
                    
                    else {
                        lAnim[4] = scoar;
                    }
                    
                }
                
                // l particles
                if(lAnim[2] > -30 && frameCount % 3 > 1) {
                    particles.push(new Particle(lAnim[2] + random(-100, -45), 300 + random(-100, 85), 245));
                }
                
                textSize(100);
                textFont(createFont("SP Custom Bold"));
                outlineText("YOU", lAnim[0], 50);
                
                textSize(80);
                outlineText("Took An", lAnim[1], 145);
                
                textSize(45);
                outlineText("But hey... you still scored", 300, lAnim[3]);
                
                textSize(250);
                pushMatrix();
                translate(lAnim[2], 300);
                rotate(10);
                
                outlineText("L", 0, 0);
                
                popMatrix();
                
                // score
                fill(200, 200);
                strokeWeight(6);
                stroke(100);
                rect(150, lAnim[3] + 45, 300, 90, 10);
                
                textSize(55);
                outlineText(round(lAnim[4]), 300, lAnim[3] + 90);
                
                // back
                if(lAnim[4] === scoar) {
                    buttons.bck.draw();
                }
                
                // thing
                textSize(16);
                textFont(createFont("SP Custom Bold"));
                if(selMode !== 1) {
                    outlineText("*This score\nis ineligible\n(Must be\nmedium)", 520, (530 - 440) + lAnim[3]);
                }
                
                else {
                    
                    outlineText("*Put this in the\nT&T to be on\nthe leaderboard\n(Spinoff proof\nfor 14k+)", 520, (530 - 440) + lAnim[3]);
                    
                    if(lAnim[4] === scoar) {
                        
                        if(bestScores[selMap] < scoar) {
                            bestScores[selMap] = round(scoar);
                        }
                        
                        // add score
                        for(var i = 0; i < ldB.length; i++) {
                            
                            if(ldB[i][0] === "You") {
                                
                                if(ldB[i][1] < scoar) {
                                    ldB[i][0] = "You";
                                    ldB[i][1] = round(scoar);
                                }
                                
                            }
                            
                        }
                        
                    }
                    
                }
                
            break;
            
            // when wave is done
            case "popup":
                
                image(imgs.shopBck, 0, 0, 600, 600);
                
                fill(0, 50);
                noStroke();
                rect(0, 0, 600, 600);
                
                fill(185);
                strokeWeight(5);
                stroke(76);
                rect(150, 140, 300, 320);
                
                textSize(30);
                textAlign(CENTER, CENTER);
                outlineText("Wave Complete!", 277, 166);
                
                textAlign(LEFT, CENTER);
                textSize(20);
                outlineText(floor((wave.waveNum + 1) * 4.73210987654321) + " coin bonus earned!\n" + waveNotes[wave.waveNum], 165, 265);
                textSize(16.5);
                outlineText("Shots: " + waveStats.att + " fired / " + waveStats.hit + " hit\n(" + (waveStats.hit / waveStats.att * 100).toFixed(1) + "% accuracy)\n" + waveStats.coins + " Coins Earned\nDamage dealt: " + (waveStats.dmg).toFixed(1), 165, 392.5);
                // outlineText(floor((wave.waveNum + 1) * 4.73210987654321) + " coin bonus earned!\n" + waveNotes[wave.waveNum], 165, 300);
                
                buttons.extPop.draw();
                
            break;
            
            // shop
            case "opened":
                
                textAlign(CENTER, CENTER);
                
                image(imgs.shopBck, 0, 0, 600, constrain(shopY, 500, 600));
                
                if(shopY > 500) {
                    shopY -= 3;
                }
                
                // popup thing
                noStroke();
                fill(150);
                quad(200, shopY, 225, shopY - 50, 375, shopY - 50, 400, shopY);
                rect(0, shopY, 600, 125);
                
                strokeWeight(2.5);
                stroke(100);
                line(300, shopY - 40, 275, shopY - 13);
                line(300, shopY - 40, 325, shopY - 13);
                
                if(!cursorCollide(200, shopY - 50, 200, 53) && !cursorCollide(0, shopY, 600, 100)) {
                    shopY += 6;
                }
                
                pageTrans.towYT++;
                
                // for the little animation with the towers going up thing
                // lets all be honest its the best part of the entire game
                for(var i = 0; i < pageTrans.towY.length; i++) {
                    
                    if(pageTrans.towYT > pageTrans.towYTimer[i]) {
                        pageTrans.towY[i] += (101 - pageTrans.towY[i]) / 15;
                    }
                    
                }
                
                // ugh
                // all the pushmatrix/translate/popmatrix was just me being lazy
                // the transitions were basically the last thing i added, and i didnt want to go fix all the buttons
                pushMatrix();
                translate(0, 100 - pageTrans.towY[0]);
                buttons.tower1.draw();
                popMatrix();
                
                pushMatrix();
                translate(0, 100 - pageTrans.towY[1]);
                buttons.tower2.draw();
                popMatrix();
                
                pushMatrix();
                translate(0, 100 - pageTrans.towY[2]);
                buttons.tower3.draw();
                popMatrix();
                
                pushMatrix();
                translate(0, 100 - pageTrans.towY[3]);
                buttons.tower4.draw();
                popMatrix();
                
                pushMatrix();
                translate(0, 100 - pageTrans.towY[4]);
                buttons.tower5.draw();
                popMatrix();
                
                pushMatrix();
                translate(0, 100 - pageTrans.towY[5]);
                buttons.tower6.draw();
                popMatrix();
                
                pushMatrix();
                translate(0, 100 - pageTrans.towY[6]);
                buttons.tower7.draw();
                popMatrix();
                
                // close shop
                if(shopY >= 597.1) {
                    page = "gm";
                    pageTrans.towY = [0, 0, 0, 0, 0, 0, 0];
                    pageTrans.towYTimer = [0, 7, 15, 24, 34, 45, 56];
                    pageTrans.towYT = 0;
                }
                
            break;
            
            // upgrade tower (aka stats page)
            case "uptow":
                
                textAlign(CENTER, CENTER);
                image(imgs.shopBck, 0, 0, 600, 600);
                
                fill(0, 50);
                noStroke();
                rect(0, 0, 600, 600);
                
                fill(185);
                strokeWeight(5);
                stroke(76);
                rect(150, 140, 300, 320);
                
                // transitions
                pageTrans.towS += (162 - pageTrans.towS) / 25;
                pageTrans.towST += (255 - pageTrans.towS) / 25;
                pageTrans.towXB += (275 - pageTrans.towXB) / 25;
                pageTrans.towXBT += (255 - pageTrans.towXBT) / 25;
                
                textSize(33);
                outlineText("Tower Statistics", pageTrans.towXB, 166, 255, pageTrans.towXBT);
                
                textAlign(LEFT, CENTER);
                
                // if frozen, BECAUSE it needs to show more stats
                if(towers[towerUp].typ === 3) {
                    
                    textSize(19.2);
                    
                    // say that three times fast
                    outlineText("Damage dealt: " + (towers[towerUp].dlt).toFixed(1) + "\nShots fired: " + towers[towerUp].fired + "\nShots hit: " + constrain(towers[towerUp].good, 0, towers[towerUp].fired) + "\nAccuracy: " + round(constrain(pageTrans.accMTBar, 0, 132) / 132 * 100) + "%\nDamage: " + (towers[towerUp].dmg).toFixed(1) + "\nRange: " + ~~towers[towerUp].range + "\nFreezing time: " + (towers[towerUp].frztm).toFixed(1) + " sec\nReload: " + ~~towers[towerUp].reload + " (" + (90 / towers[towerUp].reload).toFixed(1) + " per second)", pageTrans.towS, 293, 255, pageTrans.towST);
                    
                }
                
                // if not
                else {
                    
                    textSize(22.5);
                    outlineText("Damage dealt: " + (towers[towerUp].dlt).toFixed(1) + "\nShots fired: " + towers[towerUp].fired + "\nShots hit: " + constrain(towers[towerUp].good, 0, towers[towerUp].fired) + "\nAccuracy: " + round(constrain(pageTrans.accMTBar, 0, 104) / 104 * 100) + "%\nRange: " + ~~towers[towerUp].range + "\nDamage: " + (towers[towerUp].dmg).toFixed(1) + "\nReload: " + ~~towers[towerUp].reload + " (" + (90 / towers[towerUp].reload).toFixed(1) + " per second)", pageTrans.towS, 293, 255, pageTrans.towST);
                    
                }
                
                // the accuracy bar
                fill(150, pageTrans.accMTT);
                pageTrans.accMTT += (255 - pageTrans.accMTT) / 25;
                noStroke();
                
                // if frozen... again :D
                if(towers[towerUp].typ === 3) {
                    
                    rect(pageTrans.accMTX, 274, 132, 12, Infinity);
                    fill(225, pageTrans.accMTT);
                    rect(pageTrans.accMTX, 274, pageTrans.accMTBar, 12, Infinity);
                    
                    // transitions
                    pageTrans.accMTX += (308 - pageTrans.accMTX) / 25;
                    if(pageTrans.accMTX < 312) {
                        pageTrans.accMTBar += (((towers[towerUp].good / (towers[towerUp].fired + 0.0000001)) * 132) - pageTrans.accMTBar) / 25;
                    }
                    
                }
                
                // yes
                else {
                    
                    rect(pageTrans.accMTX, 284, 104, 16, Infinity);
                    fill(225, pageTrans.accMTT);
                    rect(pageTrans.accMTX, 284, pageTrans.accMTBar, 16, Infinity);
                    
                    // transitions
                    pageTrans.accMTX += (335 - pageTrans.accMTX) / 25;
                    if(pageTrans.accMTX < 339) {
                        pageTrans.accMTBar += (((towers[towerUp].good / (towers[towerUp].fired + 0.0000001)) * 104) - pageTrans.accMTBar) / 22.5;
                    }
                    
                }
                
                textAlign(CENTER, CENTER);
                
                // x button
                buttons.extSta.draw();
                
                // sell button
                buttons.sellTow.draw();
                
                // upgrade button
                buttons.upgTow.draw();
                
                towers[towerUp].up = false;
                
            break;
            
            // sell tower fr
            case "st":
                
                image(imgs.shopBck, 0, 0, 600, 600);
                
                fill(0, 50);
                noStroke();
                rect(0, 0, 600, 600);
                
                fill(185);
                strokeWeight(5);
                stroke(76);
                rect(150, 140, 300, 320);
                
                textSize(33);
                outlineText("Are you sure?", 275, 166);
                
                textSize(27);
                outlineText("Selling this tower will\ngive you $" + round(towers[towerUp].spendt) + ", but you\nCANNOT undo this\naction.", 300, 285);
                
                // x button
                buttons.extSta.draw();
                
                // sell tower fr button
                buttons.selTowFR.draw();
                
            break;
            
            // upgrade tower
            case "upgt":
                
                image(imgs.shopBck, 0, 0, 600, 600);
                
                fill(0, 50);
                noStroke();
                rect(0, 0, 600, 600);
                
                fill(185);
                strokeWeight(5);
                stroke(76);
                rect(150, 140, 300, 320);
                
                textSize(33);
                outlineText("Upgrade Tower", 275, 166);
                
                // if unfrozen
                if(towers[towerUp].upgCnt <= 2 && towers[towerUp].typ !== 3) {
                    
                    textSize(27);
                    outlineText("To multiply this tower's\nrange, damage and\nreload by 1.3x, it will\ncost $" + round(towers[towerUp].upg), 300, 285);
                    
                    buttons.upgTowFR.draw();
                    
                }
                
                // if frozen
                else if(towers[towerUp].upgCnt <= 2 && towers[towerUp].typ === 3) {
                    
                    textSize(25.5);
                    outlineText("To multiply this tower's\nrange, damage, reload,\nand freezing time by\n1.3x, it will cost $" + round(towers[towerUp].upg) + "!", 300, 280);
                    
                    buttons.upgTowFR.draw();
                    
                }
                
                // if max
                
                //  v
                
                
                // who is max
                else {
                    
                    textSize(27.5);
                    outlineText("Sorry! This tower\nis already maxed out.", 300, 300);
                    
                }
                
                buttons.extSta.draw();
                
            break;
        }
        
    }
    
    // ketchup
    // katchup
    // catchup
    // catch
    catch (e) {
        
        if(page === "load" || page === "logo") {
            
            println("Loading error. (you do not need to restart but the game MAY not work properly)");
            
        }
        
        else {
        
            noLoop();
            // _clearLogs();
            
            // v
            println("Uh oh, an error occurred (probably just a for loop crash). Just type a few letters randomly in the code and then delete them, and you should be fine. If the program restarts, please make a report in the T&T along with this: \n" + e);
        
        }
        
    }
    
    // cursors
    if(cursorTyp === "h") {
        cursor(HAND);
    }
    
    // tower selecting thing
    else if(cursorTyp === "c") {
        cursor('crosshair');
    }
    
    // if no buy able
    else if(cursorTyp === "l") {
        cursor('no-drop');
    }
    
    // volume slider
    else if(cursorTyp === "g") {
        cursor('grab');
    }
    
    // volume slider part 2
    else if(cursorTyp === "G") {
        cursor('grabbing');
    }
    
    else {
        cursor(ARROW);
    }
    
    // hover text thing
    for(var i = 0; i < hovTexs.length; i++) {
        hovTexs[i].draw();
        if(hovTexs.length > 0) {
            hovTexs = [];
        }
    }
    
    // resets a few things
    cursorTyp = "d";
    clicked = false;
    mouseWasOut = false;
    
    if(debug_mode) {
        
        textAlign(CENTER, CENTER);
        
        textFont(createFont("SP Custom Bold"));
        textSize(15);
        outlineText(this.__frameRate.toFixed(1) + " FPS\nParticles: " + particles.length + "\nTowers: " + towers.length + "\nEnemies: " + enemys.length, 526, 50);
        
    }
    
    // transitions
    // i kinda love this transition
    // credit to agent x (somewhat) tho @xxmoonlightxx
    if(low_lag_transition) {
        
        for (var i = transitions.length - 1; i >= 0; i--){

            transitions[i].draw();
            
            if(transitions[i].imgPos[0] < -600) {
                transitions.splice(i, 1);
            }
            
        }
    
    }
    else if(trans.started) {
        
        tint(trans.fil, trans.fil, trans.fil, trans.fil);
        image(trans.img, 0, 0, 600, 600);
        trans.fil -= 3;
        if(trans.fil <= 0) {
            trans.started = false;
        }
        
    }
    noTint();

    // resets these
    if(page === "popup" && frameCount % 30 === 0) {
        
        pageTrans.setX = 100;
        pageTrans.setXT = 0;
        pageTrans.setXB = 100;
        pageTrans.setXBT = 0;
        pageTrans.setBck = 100;
        pageTrans.setBckStrk = 0.01;
        pageTrans.setBckFill = 0;
        pageTrans.towS = 100;
        pageTrans.towST = 0;
        pageTrans.towXB = 125;
        pageTrans.towXBT = 0;
        pageTrans.accMTX = 425;
        pageTrans.accMTT = 0;
        pageTrans.accMTBar = 0;
        
    }
    
    // for leaderboard scrolling + volume slider
    if(!mouseIsPressed || mouseWasOut) {
        pressed = false;
    }
    
    // watermark of sorts
    textAlign(LEFT, TOP);
    textSize(20);
    fill(255, 50);
    text("SP - 2023", 20, 20);
    
    textAlign(CENTER, CENTER);
    
}

// what might this do?
function mouseClicked() {
    clicked = true;
}

function mouseOut() {
    mouseWasOut = true;
}


// }








// << look at that number O.O

























// very good job scrolling down here because that's what fingers are for (unless you used your tongue, in which case congratulations you did something disgusting)



